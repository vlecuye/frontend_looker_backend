"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeTransport = exports.NodeCryptoHash = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var _request = _interopRequireDefault(require("request"));
var _requestPromiseNative = _interopRequireDefault(require("request-promise-native"));
var _readableStream = require("readable-stream");
var _errors = require("request-promise-native/errors");
var _sdkRtl = require("@looker/sdk-rtl");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var utf8 = 'utf8';
var asString = value => {
  if (value instanceof Buffer) {
    return Buffer.from(value).toString(utf8);
  }
  if (value instanceof Object) {
    return JSON.stringify(value);
  }
  return value.toString();
};
class NodeCryptoHash {
  secureRandom(byteCount) {
    return _crypto.default.randomBytes(byteCount).toString('hex');
  }
  sha256Hash(message) {
    return _asyncToGenerator(function* () {
      var hash = _crypto.default.createHash('sha256');
      hash.update(message);
      return (0, _sdkRtl.safeBase64)(new Uint8Array(hash.digest()));
    })();
  }
}
exports.NodeCryptoHash = NodeCryptoHash;
class NodeTransport extends _sdkRtl.BaseTransport {
  constructor(options) {
    super(options);
    this.options = options;
  }
  rawRequest(method, path, queryParams, body, authenticator, options) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var init = yield _this.initRequest(method, path, queryParams, body, authenticator, options);
      var req = (0, _requestPromiseNative.default)(init).promise();
      var rawResponse;
      var requestStarted = Date.now();
      var responseCompleted;
      try {
        var res = yield req;
        responseCompleted = Date.now();
        var resTyped = res;
        rawResponse = {
          method,
          url: resTyped.url || init.url.toString() || '',
          body: yield resTyped.body,
          contentType: String(resTyped.headers['content-type']),
          ok: true,
          statusCode: resTyped.statusCode,
          statusMessage: resTyped.statusMessage,
          headers: res.headers,
          requestStarted,
          responseCompleted
        };
        rawResponse.ok = _this.ok(rawResponse);
      } catch (e) {
        var statusMessage = "".concat(method, " ").concat(path);
        var statusCode = 404;
        var contentType = 'text';
        var _body;
        responseCompleted = Date.now();
        if (e instanceof _errors.StatusCodeError) {
          statusCode = e.statusCode;
          if (e.error instanceof Buffer) {
            _body = asString(e.error);
            statusMessage += ": ".concat(statusCode);
          } else if (e.error instanceof Object) {
            _body = e.error;
            statusMessage += ": ".concat(e.message);
            _body.message = statusMessage;
            contentType = 'application/json';
          }
        } else if (e.error instanceof Buffer) {
          _body = asString(e.error);
        } else {
          _body = JSON.stringify(e);
          contentType = 'application/json';
        }
        rawResponse = {
          method,
          url: init.url.toString(),
          body: _body,
          contentType,
          ok: false,
          statusCode,
          statusMessage,
          headers: {},
          requestStarted,
          responseCompleted
        };
      }
      return _this.observer ? _this.observer(rawResponse) : rawResponse;
    })();
  }
  parseResponse(res) {
    return _asyncToGenerator(function* () {
      var mode = (0, _sdkRtl.responseMode)(res.contentType);
      var response;
      var error;
      if (!res.ok) {
        error = res.body;
        if (typeof error === 'string') {
          try {
            error = JSON.parse(error);
          } catch (_unused) {
            error = {
              message: "Request failed: ".concat(error)
            };
          }
        }
        response = {
          ok: false,
          error
        };
        return response;
      }
      var result = yield res.body;
      if (mode === _sdkRtl.ResponseMode.string) {
        if (res.contentType.match(/^application\/.*\bjson\b/g)) {
          try {
            if (result instanceof Buffer) {
              result = Buffer.from(result).toString(utf8);
            }
            if (!(result instanceof Object)) {
              result = JSON.parse(result.toString());
            }
          } catch (err) {
            error = err;
          }
        } else if (!error) {
          result = asString(result);
        }
      } else {
        try {
          var _result;
          result = Buffer.from((_result = result) !== null && _result !== void 0 ? _result : '').toString('binary');
        } catch (err) {
          error = err;
        }
      }
      if (!error) {
        response = {
          ok: true,
          value: result
        };
      } else {
        response = {
          ok: false,
          error: error
        };
      }
      return response;
    })();
  }
  request(method, path, queryParams, body, authenticator, options) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        var res = yield _this2.rawRequest(method, path, queryParams, body, authenticator, options);
        return yield _this2.parseResponse(res);
      } catch (e) {
        var error = {
          message: typeof e.message === 'string' ? e.message : "The SDK call was not successful. The error was '".concat(e, "'."),
          type: 'sdk_error'
        };
        return {
          error,
          ok: false
        };
      }
    })();
  }
  requestor(props) {
    var _props$method;
    var method = (_props$method = props.method) === null || _props$method === void 0 ? void 0 : _props$method.toString().toUpperCase();
    switch (method) {
      case 'GET':
        return _request.default.get(props);
      case 'PUT':
        return _request.default.put(props);
      case 'POST':
        return _request.default.post(props);
      case 'PATCH':
        return _request.default.patch(props);
      case 'DELETE':
        return _request.default.put(props);
      case 'HEAD':
        return _request.default.head(props);
      default:
        return _request.default.get(props);
    }
  }
  stream(callback, method, path, queryParams, body, authenticator, options) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      var stream = new _readableStream.PassThrough();
      var returnPromise = callback(stream);
      var init = yield _this3.initRequest(method, path, queryParams, body, authenticator, options);
      var streamPromise = new Promise((resolve, reject) => {
        (0, _sdkRtl.trace)("[stream] beginning stream via download url", init);
        var hasResolved = false;
        var req = _this3.requestor(init);
        req.on('error', err => {
          if (hasResolved && err.code === 'ECONNRESET') {
            (0, _sdkRtl.trace)('ignoring ECONNRESET that occurred after streaming finished', init);
          } else {
            (0, _sdkRtl.trace)('streaming error', err);
            reject(err);
          }
        }).on('finish', () => {
          (0, _sdkRtl.trace)("[stream] streaming via download url finished", init);
        }).on('socket', socket => {
          (0, _sdkRtl.trace)("[stream] setting keepalive on socket", init);
          socket.setKeepAlive(true);
        }).on('abort', () => {
          (0, _sdkRtl.trace)("[stream] streaming via download url aborted", init);
        }).on('response', () => {
          (0, _sdkRtl.trace)("[stream] got response from download url", init);
        }).on('close', () => {
          (0, _sdkRtl.trace)("[stream] request stream closed", init);
        }).pipe(stream).on('error', err => {
          (0, _sdkRtl.trace)("[stream] PassThrough stream error", err);
          reject(err);
        }).on('finish', () => {
          (0, _sdkRtl.trace)("[stream] PassThrough stream finished", init);
          resolve();
          hasResolved = true;
        }).on('close', () => {
          (0, _sdkRtl.trace)("[stream] PassThrough stream closed", init);
        });
      });
      var results = yield Promise.all([returnPromise, streamPromise]);
      return results[0];
    })();
  }
  verifySsl(options) {
    if (!options) options = this.options;
    return 'verify_ssl' in options ? options.verify_ssl : true;
  }
  timeout(options) {
    if (!options) options = this.options;
    if ('timeout' in options && options.timeout) return options.timeout;
    return _sdkRtl.defaultTimeout;
  }
  initRequest(method, path, queryParams, body, authenticator, options) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      options = options ? _objectSpread(_objectSpread({}, _this4.options), options) : _this4.options;
      if (!options.agentTag) {
        options.agentTag = _sdkRtl.agentPrefix;
      }
      var headers = _objectSpread({
        [_sdkRtl.LookerAppId]: options.agentTag
      }, options.headers);
      var requestPath = _this4.makeUrl(path, options, queryParams);
      var init = {
        body: body || undefined,
        encoding: null,
        headers: headers,
        json: body && typeof body !== 'string',
        method,
        rejectUnauthorized: _this4.verifySsl(options),
        resolveWithFullResponse: true,
        timeout: _this4.timeout(options) * 1000,
        url: requestPath
      };
      if ('encoding' in options) init.encoding = options.encoding;
      if (authenticator) {
        init = yield authenticator(init);
      }
      return init;
    })();
  }
}
exports.NodeTransport = NodeTransport;
//# sourceMappingURL=nodeTransport.js.map