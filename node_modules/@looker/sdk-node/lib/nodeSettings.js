"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readIniConfig = exports.readEnvConfig = exports.getenv = exports.NodeSettingsIniFile = exports.NodeSettings = exports.ApiConfigSection = exports.ApiConfig = void 0;
var fs = _interopRequireWildcard(require("fs"));
var ini = _interopRequireWildcard(require("ini"));
var _sdkRtl = require("@looker/sdk-rtl");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var getenv = function getenv(name) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var val = process.env[name];
  return val === undefined ? defaultValue : val;
};
exports.getenv = getenv;
var ApiConfig = contents => ini.parse(contents);
exports.ApiConfig = ApiConfig;
var ApiConfigSection = (contents, section) => {
  var config = ApiConfig(contents);
  if (!section) {
    section = Object.keys(config)[0];
  }
  var settings = config[section];
  if (!settings) {
    throw new Error("No section named \"".concat(section, "\" was found"));
  }
  if (settings.api_version) {
    console.warn('api_version is no longer read from a configuration file by the SDK');
  }
  return settings;
};
exports.ApiConfigSection = ApiConfigSection;
var readEnvConfig = envPrefix => {
  var values = {};
  var configMap = (0, _sdkRtl.ApiConfigMap)(envPrefix);
  Object.keys(configMap).forEach(key => {
    var envKey = configMap[key];
    if (process.env[envKey] !== undefined) {
      var val = (0, _sdkRtl.unquote)(process.env[envKey]);
      values[key] = val;
    }
  });
  return values;
};
exports.readEnvConfig = readEnvConfig;
var readIniConfig = (fileName, envPrefix, section) => {
  var config = readEnvConfig(envPrefix);
  if (fileName && fs.existsSync(fileName)) {
    config = _objectSpread(_objectSpread({}, ApiConfigSection(fs.readFileSync(fileName, 'utf8'), section)), config);
  }
  Object.keys(config).forEach(key => {
    var val = config[key];
    if (typeof val === 'string') {
      config[key] = (0, _sdkRtl.unquote)(val);
    }
  });
  return config;
};
exports.readIniConfig = readIniConfig;
class NodeSettings extends _sdkRtl.ApiSettings {
  constructor(envPrefix, contents, section) {
    var settings;
    if (contents) {
      if (typeof contents === 'string') {
        settings = ApiConfigSection(contents, section);
      } else {
        settings = contents;
      }
      settings = _objectSpread(_objectSpread({}, readEnvConfig(envPrefix)), settings);
    } else {
      settings = readEnvConfig(envPrefix);
    }
    super(_objectSpread(_objectSpread({}, (0, _sdkRtl.DefaultSettings)()), settings));
    _defineProperty(this, "envPrefix", void 0);
    _defineProperty(this, "section", void 0);
    this.section = section !== null && section !== void 0 ? section : '';
    this.envPrefix = envPrefix;
  }
  readConfig(_section) {
    return readEnvConfig(this.envPrefix);
  }
}
exports.NodeSettings = NodeSettings;
class NodeSettingsIniFile extends NodeSettings {
  constructor(envPrefix) {
    var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var section = arguments.length > 2 ? arguments[2] : undefined;
    if (fileName && !fs.existsSync(fileName)) {
      throw (0, _sdkRtl.sdkError)({
        message: "File ".concat(fileName, " was not found")
      });
    }
    fileName = fileName || './looker.ini';
    var config = readIniConfig(fileName, envPrefix, section);
    var settings = (0, _sdkRtl.ValueSettings)(config, envPrefix);
    super(envPrefix, settings, section);
    _defineProperty(this, "fileName", void 0);
    this.fileName = fileName;
  }
  readConfig(section) {
    section = section || this.section;
    return readIniConfig(this.fileName, this.envPrefix, section);
  }
}
exports.NodeSettingsIniFile = NodeSettingsIniFile;
//# sourceMappingURL=nodeSettings.js.map