"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Looker31SDK = void 0;
var _sdkRtl = require("@looker/sdk-rtl");
var _constants = require("../constants");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Looker31SDK extends _sdkRtl.APIMethods {
  constructor(authSession) {
    super(authSession, _constants.sdkVersion);
    this.apiVersion = Looker31SDK.ApiVersion;
    this.apiPath = authSession.settings.base_url === '' ? '' : authSession.settings.base_url + '/api/' + this.apiVersion;
  }
  login(request, options) {
    var _this = this;
    return _asyncToGenerator(function* () {
      return _this.post('/login', {
        client_id: request.client_id,
        client_secret: request.client_secret
      }, null, options);
    })();
  }
  login_user(user_id, associative, options) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      return _this2.post("/login/".concat(user_id), {
        associative
      }, null, options);
    })();
  }
  logout(options) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      return _this3.delete('/logout', null, null, options);
    })();
  }
  create_sso_embed_url(body, options) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      return _this4.post('/embed/sso_url', null, body, options);
    })();
  }
  ldap_config(options) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      return _this5.get('/ldap_config', null, null, options);
    })();
  }
  update_ldap_config(body, options) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      return _this6.patch('/ldap_config', null, body, options);
    })();
  }
  test_ldap_config_connection(body, options) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      return _this7.put('/ldap_config/test_connection', null, body, options);
    })();
  }
  test_ldap_config_auth(body, options) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      return _this8.put('/ldap_config/test_auth', null, body, options);
    })();
  }
  test_ldap_config_user_info(body, options) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      return _this9.put('/ldap_config/test_user_info', null, body, options);
    })();
  }
  test_ldap_config_user_auth(body, options) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      return _this10.put('/ldap_config/test_user_auth', null, body, options);
    })();
  }
  oidc_config(options) {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      return _this11.get('/oidc_config', null, null, options);
    })();
  }
  update_oidc_config(body, options) {
    var _this12 = this;
    return _asyncToGenerator(function* () {
      return _this12.patch('/oidc_config', null, body, options);
    })();
  }
  oidc_test_config(test_slug, options) {
    var _this13 = this;
    return _asyncToGenerator(function* () {
      test_slug = (0, _sdkRtl.encodeParam)(test_slug);
      return _this13.get("/oidc_test_configs/".concat(test_slug), null, null, options);
    })();
  }
  delete_oidc_test_config(test_slug, options) {
    var _this14 = this;
    return _asyncToGenerator(function* () {
      test_slug = (0, _sdkRtl.encodeParam)(test_slug);
      return _this14.delete("/oidc_test_configs/".concat(test_slug), null, null, options);
    })();
  }
  create_oidc_test_config(body, options) {
    var _this15 = this;
    return _asyncToGenerator(function* () {
      return _this15.post('/oidc_test_configs', null, body, options);
    })();
  }
  password_config(options) {
    var _this16 = this;
    return _asyncToGenerator(function* () {
      return _this16.get('/password_config', null, null, options);
    })();
  }
  update_password_config(body, options) {
    var _this17 = this;
    return _asyncToGenerator(function* () {
      return _this17.patch('/password_config', null, body, options);
    })();
  }
  force_password_reset_at_next_login_for_all_users(options) {
    var _this18 = this;
    return _asyncToGenerator(function* () {
      return _this18.put('/password_config/force_password_reset_at_next_login_for_all_users', null, null, options);
    })();
  }
  saml_config(options) {
    var _this19 = this;
    return _asyncToGenerator(function* () {
      return _this19.get('/saml_config', null, null, options);
    })();
  }
  update_saml_config(body, options) {
    var _this20 = this;
    return _asyncToGenerator(function* () {
      return _this20.patch('/saml_config', null, body, options);
    })();
  }
  saml_test_config(test_slug, options) {
    var _this21 = this;
    return _asyncToGenerator(function* () {
      test_slug = (0, _sdkRtl.encodeParam)(test_slug);
      return _this21.get("/saml_test_configs/".concat(test_slug), null, null, options);
    })();
  }
  delete_saml_test_config(test_slug, options) {
    var _this22 = this;
    return _asyncToGenerator(function* () {
      test_slug = (0, _sdkRtl.encodeParam)(test_slug);
      return _this22.delete("/saml_test_configs/".concat(test_slug), null, null, options);
    })();
  }
  create_saml_test_config(body, options) {
    var _this23 = this;
    return _asyncToGenerator(function* () {
      return _this23.post('/saml_test_configs', null, body, options);
    })();
  }
  parse_saml_idp_metadata(body, options) {
    var _this24 = this;
    return _asyncToGenerator(function* () {
      return _this24.post('/parse_saml_idp_metadata', null, body, options);
    })();
  }
  fetch_and_parse_saml_idp_metadata(body, options) {
    var _this25 = this;
    return _asyncToGenerator(function* () {
      return _this25.post('/fetch_and_parse_saml_idp_metadata', null, body, options);
    })();
  }
  session_config(options) {
    var _this26 = this;
    return _asyncToGenerator(function* () {
      return _this26.get('/session_config', null, null, options);
    })();
  }
  update_session_config(body, options) {
    var _this27 = this;
    return _asyncToGenerator(function* () {
      return _this27.patch('/session_config', null, body, options);
    })();
  }
  all_user_login_lockouts(fields, options) {
    var _this28 = this;
    return _asyncToGenerator(function* () {
      return _this28.get('/user_login_lockouts', {
        fields
      }, null, options);
    })();
  }
  search_user_login_lockouts(request, options) {
    var _this29 = this;
    return _asyncToGenerator(function* () {
      return _this29.get('/user_login_lockouts/search', {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        auth_type: request.auth_type,
        full_name: request.full_name,
        email: request.email,
        remote_id: request.remote_id,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  delete_user_login_lockout(key, options) {
    var _this30 = this;
    return _asyncToGenerator(function* () {
      key = (0, _sdkRtl.encodeParam)(key);
      return _this30.delete("/user_login_lockout/".concat(key), null, null, options);
    })();
  }
  all_color_collections(fields, options) {
    var _this31 = this;
    return _asyncToGenerator(function* () {
      return _this31.get('/color_collections', {
        fields
      }, null, options);
    })();
  }
  create_color_collection(body, options) {
    var _this32 = this;
    return _asyncToGenerator(function* () {
      return _this32.post('/color_collections', null, body, options);
    })();
  }
  color_collections_custom(fields, options) {
    var _this33 = this;
    return _asyncToGenerator(function* () {
      return _this33.get('/color_collections/custom', {
        fields
      }, null, options);
    })();
  }
  color_collections_standard(fields, options) {
    var _this34 = this;
    return _asyncToGenerator(function* () {
      return _this34.get('/color_collections/standard', {
        fields
      }, null, options);
    })();
  }
  default_color_collection(options) {
    var _this35 = this;
    return _asyncToGenerator(function* () {
      return _this35.get('/color_collections/default', null, null, options);
    })();
  }
  set_default_color_collection(collection_id, options) {
    var _this36 = this;
    return _asyncToGenerator(function* () {
      return _this36.put('/color_collections/default', {
        collection_id
      }, null, options);
    })();
  }
  color_collection(collection_id, fields, options) {
    var _this37 = this;
    return _asyncToGenerator(function* () {
      collection_id = (0, _sdkRtl.encodeParam)(collection_id);
      return _this37.get("/color_collections/".concat(collection_id), {
        fields
      }, null, options);
    })();
  }
  update_color_collection(collection_id, body, options) {
    var _this38 = this;
    return _asyncToGenerator(function* () {
      collection_id = (0, _sdkRtl.encodeParam)(collection_id);
      return _this38.patch("/color_collections/".concat(collection_id), null, body, options);
    })();
  }
  delete_color_collection(collection_id, options) {
    var _this39 = this;
    return _asyncToGenerator(function* () {
      collection_id = (0, _sdkRtl.encodeParam)(collection_id);
      return _this39.delete("/color_collections/".concat(collection_id), null, null, options);
    })();
  }
  backup_configuration(options) {
    var _this40 = this;
    return _asyncToGenerator(function* () {
      return _this40.get('/backup_configuration', null, null, options);
    })();
  }
  update_backup_configuration(body, options) {
    var _this41 = this;
    return _asyncToGenerator(function* () {
      return _this41.patch('/backup_configuration', null, body, options);
    })();
  }
  cloud_storage_configuration(options) {
    var _this42 = this;
    return _asyncToGenerator(function* () {
      return _this42.get('/cloud_storage', null, null, options);
    })();
  }
  update_cloud_storage_configuration(body, options) {
    var _this43 = this;
    return _asyncToGenerator(function* () {
      return _this43.patch('/cloud_storage', null, body, options);
    })();
  }
  custom_welcome_email(options) {
    var _this44 = this;
    return _asyncToGenerator(function* () {
      return _this44.get('/custom_welcome_email', null, null, options);
    })();
  }
  update_custom_welcome_email(body, send_test_welcome_email, options) {
    var _this45 = this;
    return _asyncToGenerator(function* () {
      return _this45.patch('/custom_welcome_email', {
        send_test_welcome_email
      }, body, options);
    })();
  }
  update_custom_welcome_email_test(body, options) {
    var _this46 = this;
    return _asyncToGenerator(function* () {
      return _this46.put('/custom_welcome_email_test', null, body, options);
    })();
  }
  digest_emails_enabled(options) {
    var _this47 = this;
    return _asyncToGenerator(function* () {
      return _this47.get('/digest_emails_enabled', null, null, options);
    })();
  }
  update_digest_emails_enabled(body, options) {
    var _this48 = this;
    return _asyncToGenerator(function* () {
      return _this48.patch('/digest_emails_enabled', null, body, options);
    })();
  }
  create_digest_email_send(options) {
    var _this49 = this;
    return _asyncToGenerator(function* () {
      return _this49.post('/digest_email_send', null, null, options);
    })();
  }
  internal_help_resources_content(options) {
    var _this50 = this;
    return _asyncToGenerator(function* () {
      return _this50.get('/internal_help_resources_content', null, null, options);
    })();
  }
  update_internal_help_resources_content(body, options) {
    var _this51 = this;
    return _asyncToGenerator(function* () {
      return _this51.patch('/internal_help_resources_content', null, body, options);
    })();
  }
  internal_help_resources(options) {
    var _this52 = this;
    return _asyncToGenerator(function* () {
      return _this52.get('/internal_help_resources_enabled', null, null, options);
    })();
  }
  update_internal_help_resources(body, options) {
    var _this53 = this;
    return _asyncToGenerator(function* () {
      return _this53.patch('/internal_help_resources', null, body, options);
    })();
  }
  all_legacy_features(options) {
    var _this54 = this;
    return _asyncToGenerator(function* () {
      return _this54.get('/legacy_features', null, null, options);
    })();
  }
  legacy_feature(legacy_feature_id, options) {
    var _this55 = this;
    return _asyncToGenerator(function* () {
      return _this55.get("/legacy_features/".concat(legacy_feature_id), null, null, options);
    })();
  }
  update_legacy_feature(legacy_feature_id, body, options) {
    var _this56 = this;
    return _asyncToGenerator(function* () {
      return _this56.patch("/legacy_features/".concat(legacy_feature_id), null, body, options);
    })();
  }
  all_locales(options) {
    var _this57 = this;
    return _asyncToGenerator(function* () {
      return _this57.get('/locales', null, null, options);
    })();
  }
  set_smtp_settings(body, options) {
    var _this58 = this;
    return _asyncToGenerator(function* () {
      return _this58.post('/smtp_settings', null, body, options);
    })();
  }
  all_timezones(options) {
    var _this59 = this;
    return _asyncToGenerator(function* () {
      return _this59.get('/timezones', null, null, options);
    })();
  }
  versions(fields, options) {
    var _this60 = this;
    return _asyncToGenerator(function* () {
      return _this60.get('/versions', {
        fields
      }, null, options);
    })();
  }
  whitelabel_configuration(fields, options) {
    var _this61 = this;
    return _asyncToGenerator(function* () {
      return _this61.get('/whitelabel_configuration', {
        fields
      }, null, options);
    })();
  }
  update_whitelabel_configuration(body, options) {
    var _this62 = this;
    return _asyncToGenerator(function* () {
      return _this62.put('/whitelabel_configuration', null, body, options);
    })();
  }
  all_connections(fields, options) {
    var _this63 = this;
    return _asyncToGenerator(function* () {
      return _this63.get('/connections', {
        fields
      }, null, options);
    })();
  }
  create_connection(body, options) {
    var _this64 = this;
    return _asyncToGenerator(function* () {
      return _this64.post('/connections', null, body, options);
    })();
  }
  connection(connection_name, fields, options) {
    var _this65 = this;
    return _asyncToGenerator(function* () {
      connection_name = (0, _sdkRtl.encodeParam)(connection_name);
      return _this65.get("/connections/".concat(connection_name), {
        fields
      }, null, options);
    })();
  }
  update_connection(connection_name, body, options) {
    var _this66 = this;
    return _asyncToGenerator(function* () {
      connection_name = (0, _sdkRtl.encodeParam)(connection_name);
      return _this66.patch("/connections/".concat(connection_name), null, body, options);
    })();
  }
  delete_connection(connection_name, options) {
    var _this67 = this;
    return _asyncToGenerator(function* () {
      connection_name = (0, _sdkRtl.encodeParam)(connection_name);
      return _this67.delete("/connections/".concat(connection_name), null, null, options);
    })();
  }
  delete_connection_override(connection_name, override_context, options) {
    var _this68 = this;
    return _asyncToGenerator(function* () {
      connection_name = (0, _sdkRtl.encodeParam)(connection_name);
      override_context = (0, _sdkRtl.encodeParam)(override_context);
      return _this68.delete("/connections/".concat(connection_name, "/connection_override/").concat(override_context), null, null, options);
    })();
  }
  test_connection(connection_name, tests, options) {
    var _this69 = this;
    return _asyncToGenerator(function* () {
      connection_name = (0, _sdkRtl.encodeParam)(connection_name);
      return _this69.put("/connections/".concat(connection_name, "/test"), {
        tests
      }, null, options);
    })();
  }
  test_connection_config(body, tests, options) {
    var _this70 = this;
    return _asyncToGenerator(function* () {
      return _this70.put('/connections/test', {
        tests
      }, body, options);
    })();
  }
  all_dialect_infos(fields, options) {
    var _this71 = this;
    return _asyncToGenerator(function* () {
      return _this71.get('/dialect_info', {
        fields
      }, null, options);
    })();
  }
  search_content_favorites(request, options) {
    var _this72 = this;
    return _asyncToGenerator(function* () {
      return _this72.get('/content_favorite/search', {
        id: request.id,
        user_id: request.user_id,
        content_metadata_id: request.content_metadata_id,
        dashboard_id: request.dashboard_id,
        look_id: request.look_id,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        fields: request.fields,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  content_favorite(content_favorite_id, fields, options) {
    var _this73 = this;
    return _asyncToGenerator(function* () {
      return _this73.get("/content_favorite/".concat(content_favorite_id), {
        fields
      }, null, options);
    })();
  }
  delete_content_favorite(content_favorite_id, options) {
    var _this74 = this;
    return _asyncToGenerator(function* () {
      return _this74.delete("/content_favorite/".concat(content_favorite_id), null, null, options);
    })();
  }
  create_content_favorite(body, options) {
    var _this75 = this;
    return _asyncToGenerator(function* () {
      return _this75.post('/content_favorite', null, body, options);
    })();
  }
  all_content_metadatas(parent_id, fields, options) {
    var _this76 = this;
    return _asyncToGenerator(function* () {
      return _this76.get('/content_metadata', {
        parent_id,
        fields
      }, null, options);
    })();
  }
  content_metadata(content_metadata_id, fields, options) {
    var _this77 = this;
    return _asyncToGenerator(function* () {
      return _this77.get("/content_metadata/".concat(content_metadata_id), {
        fields
      }, null, options);
    })();
  }
  update_content_metadata(content_metadata_id, body, options) {
    var _this78 = this;
    return _asyncToGenerator(function* () {
      return _this78.patch("/content_metadata/".concat(content_metadata_id), null, body, options);
    })();
  }
  all_content_metadata_accesses(content_metadata_id, fields, options) {
    var _this79 = this;
    return _asyncToGenerator(function* () {
      return _this79.get('/content_metadata_access', {
        content_metadata_id,
        fields
      }, null, options);
    })();
  }
  create_content_metadata_access(body, send_boards_notification_email, options) {
    var _this80 = this;
    return _asyncToGenerator(function* () {
      return _this80.post('/content_metadata_access', {
        send_boards_notification_email
      }, body, options);
    })();
  }
  update_content_metadata_access(content_metadata_access_id, body, options) {
    var _this81 = this;
    return _asyncToGenerator(function* () {
      return _this81.put("/content_metadata_access/".concat(content_metadata_access_id), null, body, options);
    })();
  }
  delete_content_metadata_access(content_metadata_access_id, options) {
    var _this82 = this;
    return _asyncToGenerator(function* () {
      return _this82.delete("/content_metadata_access/".concat(content_metadata_access_id), null, null, options);
    })();
  }
  content_thumbnail(request, options) {
    var _this83 = this;
    return _asyncToGenerator(function* () {
      request.type = (0, _sdkRtl.encodeParam)(request.type);
      request.resource_id = (0, _sdkRtl.encodeParam)(request.resource_id);
      return _this83.get("/content_thumbnail/".concat(request.type, "/").concat(request.resource_id), {
        reload: request.reload,
        theme: request.theme,
        format: request.format,
        width: request.width,
        height: request.height
      }, null, options);
    })();
  }
  content_validation(fields, options) {
    var _this84 = this;
    return _asyncToGenerator(function* () {
      return _this84.get('/content_validation', {
        fields
      }, null, options);
    })();
  }
  search_content_views(request, options) {
    var _this85 = this;
    return _asyncToGenerator(function* () {
      return _this85.get('/content_view/search', {
        view_count: request.view_count,
        group_id: request.group_id,
        look_id: request.look_id,
        dashboard_id: request.dashboard_id,
        content_metadata_id: request.content_metadata_id,
        start_of_week_date: request.start_of_week_date,
        all_time: request.all_time,
        user_id: request.user_id,
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  vector_thumbnail(type, resource_id, reload, options) {
    var _this86 = this;
    return _asyncToGenerator(function* () {
      type = (0, _sdkRtl.encodeParam)(type);
      resource_id = (0, _sdkRtl.encodeParam)(resource_id);
      return _this86.get("/vector_thumbnail/".concat(type, "/").concat(resource_id), {
        reload
      }, null, options);
    })();
  }
  all_dashboards(fields, options) {
    var _this87 = this;
    return _asyncToGenerator(function* () {
      return _this87.get('/dashboards', {
        fields
      }, null, options);
    })();
  }
  create_dashboard(body, options) {
    var _this88 = this;
    return _asyncToGenerator(function* () {
      return _this88.post('/dashboards', null, body, options);
    })();
  }
  search_dashboards(request, options) {
    var _this89 = this;
    return _asyncToGenerator(function* () {
      return _this89.get('/dashboards/search', {
        id: request.id,
        slug: request.slug,
        title: request.title,
        description: request.description,
        content_favorite_id: request.content_favorite_id,
        space_id: request.space_id,
        folder_id: request.folder_id,
        deleted: request.deleted,
        user_id: request.user_id,
        view_count: request.view_count,
        content_metadata_id: request.content_metadata_id,
        curate: request.curate,
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  import_lookml_dashboard(lookml_dashboard_id, space_id, body, raw_locale, options) {
    var _this90 = this;
    return _asyncToGenerator(function* () {
      lookml_dashboard_id = (0, _sdkRtl.encodeParam)(lookml_dashboard_id);
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this90.post("/dashboards/".concat(lookml_dashboard_id, "/import/").concat(space_id), {
        raw_locale
      }, body, options);
    })();
  }
  sync_lookml_dashboard(lookml_dashboard_id, body, raw_locale, options) {
    var _this91 = this;
    return _asyncToGenerator(function* () {
      lookml_dashboard_id = (0, _sdkRtl.encodeParam)(lookml_dashboard_id);
      return _this91.patch("/dashboards/".concat(lookml_dashboard_id, "/sync"), {
        raw_locale
      }, body, options);
    })();
  }
  dashboard(dashboard_id, fields, options) {
    var _this92 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this92.get("/dashboards/".concat(dashboard_id), {
        fields
      }, null, options);
    })();
  }
  update_dashboard(dashboard_id, body, options) {
    var _this93 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this93.patch("/dashboards/".concat(dashboard_id), null, body, options);
    })();
  }
  delete_dashboard(dashboard_id, options) {
    var _this94 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this94.delete("/dashboards/".concat(dashboard_id), null, null, options);
    })();
  }
  dashboard_aggregate_table_lookml(dashboard_id, options) {
    var _this95 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this95.get("/dashboards/aggregate_table_lookml/".concat(dashboard_id), null, null, options);
    })();
  }
  dashboard_lookml(dashboard_id, options) {
    var _this96 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this96.get("/dashboards/lookml/".concat(dashboard_id), null, null, options);
    })();
  }
  search_dashboard_elements(request, options) {
    var _this97 = this;
    return _asyncToGenerator(function* () {
      return _this97.get('/dashboard_elements/search', {
        dashboard_id: request.dashboard_id,
        look_id: request.look_id,
        title: request.title,
        deleted: request.deleted,
        fields: request.fields,
        filter_or: request.filter_or,
        sorts: request.sorts
      }, null, options);
    })();
  }
  dashboard_element(dashboard_element_id, fields, options) {
    var _this98 = this;
    return _asyncToGenerator(function* () {
      dashboard_element_id = (0, _sdkRtl.encodeParam)(dashboard_element_id);
      return _this98.get("/dashboard_elements/".concat(dashboard_element_id), {
        fields
      }, null, options);
    })();
  }
  update_dashboard_element(dashboard_element_id, body, fields, options) {
    var _this99 = this;
    return _asyncToGenerator(function* () {
      dashboard_element_id = (0, _sdkRtl.encodeParam)(dashboard_element_id);
      return _this99.patch("/dashboard_elements/".concat(dashboard_element_id), {
        fields
      }, body, options);
    })();
  }
  delete_dashboard_element(dashboard_element_id, options) {
    var _this100 = this;
    return _asyncToGenerator(function* () {
      dashboard_element_id = (0, _sdkRtl.encodeParam)(dashboard_element_id);
      return _this100.delete("/dashboard_elements/".concat(dashboard_element_id), null, null, options);
    })();
  }
  dashboard_dashboard_elements(dashboard_id, fields, options) {
    var _this101 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this101.get("/dashboards/".concat(dashboard_id, "/dashboard_elements"), {
        fields
      }, null, options);
    })();
  }
  create_dashboard_element(request, options) {
    var _this102 = this;
    return _asyncToGenerator(function* () {
      return _this102.post('/dashboard_elements', {
        fields: request.fields,
        apply_filters: request.apply_filters
      }, request.body, options);
    })();
  }
  dashboard_filter(dashboard_filter_id, fields, options) {
    var _this103 = this;
    return _asyncToGenerator(function* () {
      dashboard_filter_id = (0, _sdkRtl.encodeParam)(dashboard_filter_id);
      return _this103.get("/dashboard_filters/".concat(dashboard_filter_id), {
        fields
      }, null, options);
    })();
  }
  update_dashboard_filter(dashboard_filter_id, body, fields, options) {
    var _this104 = this;
    return _asyncToGenerator(function* () {
      dashboard_filter_id = (0, _sdkRtl.encodeParam)(dashboard_filter_id);
      return _this104.patch("/dashboard_filters/".concat(dashboard_filter_id), {
        fields
      }, body, options);
    })();
  }
  delete_dashboard_filter(dashboard_filter_id, options) {
    var _this105 = this;
    return _asyncToGenerator(function* () {
      dashboard_filter_id = (0, _sdkRtl.encodeParam)(dashboard_filter_id);
      return _this105.delete("/dashboard_filters/".concat(dashboard_filter_id), null, null, options);
    })();
  }
  dashboard_dashboard_filters(dashboard_id, fields, options) {
    var _this106 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this106.get("/dashboards/".concat(dashboard_id, "/dashboard_filters"), {
        fields
      }, null, options);
    })();
  }
  create_dashboard_filter(body, fields, options) {
    var _this107 = this;
    return _asyncToGenerator(function* () {
      return _this107.post('/dashboard_filters', {
        fields
      }, body, options);
    })();
  }
  dashboard_layout_component(dashboard_layout_component_id, fields, options) {
    var _this108 = this;
    return _asyncToGenerator(function* () {
      dashboard_layout_component_id = (0, _sdkRtl.encodeParam)(dashboard_layout_component_id);
      return _this108.get("/dashboard_layout_components/".concat(dashboard_layout_component_id), {
        fields
      }, null, options);
    })();
  }
  update_dashboard_layout_component(dashboard_layout_component_id, body, fields, options) {
    var _this109 = this;
    return _asyncToGenerator(function* () {
      dashboard_layout_component_id = (0, _sdkRtl.encodeParam)(dashboard_layout_component_id);
      return _this109.patch("/dashboard_layout_components/".concat(dashboard_layout_component_id), {
        fields
      }, body, options);
    })();
  }
  dashboard_layout_dashboard_layout_components(dashboard_layout_id, fields, options) {
    var _this110 = this;
    return _asyncToGenerator(function* () {
      dashboard_layout_id = (0, _sdkRtl.encodeParam)(dashboard_layout_id);
      return _this110.get("/dashboard_layouts/".concat(dashboard_layout_id, "/dashboard_layout_components"), {
        fields
      }, null, options);
    })();
  }
  dashboard_layout(dashboard_layout_id, fields, options) {
    var _this111 = this;
    return _asyncToGenerator(function* () {
      dashboard_layout_id = (0, _sdkRtl.encodeParam)(dashboard_layout_id);
      return _this111.get("/dashboard_layouts/".concat(dashboard_layout_id), {
        fields
      }, null, options);
    })();
  }
  update_dashboard_layout(dashboard_layout_id, body, fields, options) {
    var _this112 = this;
    return _asyncToGenerator(function* () {
      dashboard_layout_id = (0, _sdkRtl.encodeParam)(dashboard_layout_id);
      return _this112.patch("/dashboard_layouts/".concat(dashboard_layout_id), {
        fields
      }, body, options);
    })();
  }
  delete_dashboard_layout(dashboard_layout_id, options) {
    var _this113 = this;
    return _asyncToGenerator(function* () {
      dashboard_layout_id = (0, _sdkRtl.encodeParam)(dashboard_layout_id);
      return _this113.delete("/dashboard_layouts/".concat(dashboard_layout_id), null, null, options);
    })();
  }
  dashboard_dashboard_layouts(dashboard_id, fields, options) {
    var _this114 = this;
    return _asyncToGenerator(function* () {
      dashboard_id = (0, _sdkRtl.encodeParam)(dashboard_id);
      return _this114.get("/dashboards/".concat(dashboard_id, "/dashboard_layouts"), {
        fields
      }, null, options);
    })();
  }
  create_dashboard_layout(body, fields, options) {
    var _this115 = this;
    return _asyncToGenerator(function* () {
      return _this115.post('/dashboard_layouts', {
        fields
      }, body, options);
    })();
  }
  perform_data_action(body, options) {
    var _this116 = this;
    return _asyncToGenerator(function* () {
      return _this116.post('/data_actions', null, body, options);
    })();
  }
  fetch_remote_data_action_form(body, options) {
    var _this117 = this;
    return _asyncToGenerator(function* () {
      return _this117.post('/data_actions/form', null, body, options);
    })();
  }
  all_datagroups(options) {
    var _this118 = this;
    return _asyncToGenerator(function* () {
      return _this118.get('/datagroups', null, null, options);
    })();
  }
  datagroup(datagroup_id, options) {
    var _this119 = this;
    return _asyncToGenerator(function* () {
      datagroup_id = (0, _sdkRtl.encodeParam)(datagroup_id);
      return _this119.get("/datagroups/".concat(datagroup_id), null, null, options);
    })();
  }
  update_datagroup(datagroup_id, body, options) {
    var _this120 = this;
    return _asyncToGenerator(function* () {
      datagroup_id = (0, _sdkRtl.encodeParam)(datagroup_id);
      return _this120.patch("/datagroups/".concat(datagroup_id), null, body, options);
    })();
  }
  graph_derived_tables_for_model(request, options) {
    var _this121 = this;
    return _asyncToGenerator(function* () {
      request.model = (0, _sdkRtl.encodeParam)(request.model);
      return _this121.get("/derived_table/graph/model/".concat(request.model), {
        format: request.format,
        color: request.color
      }, null, options);
    })();
  }
  graph_derived_tables_for_view(request, options) {
    var _this122 = this;
    return _asyncToGenerator(function* () {
      request.view = (0, _sdkRtl.encodeParam)(request.view);
      return _this122.get("/derived_table/graph/view/".concat(request.view), {
        models: request.models,
        workspace: request.workspace
      }, null, options);
    })();
  }
  start_pdt_build(request, options) {
    var _this123 = this;
    return _asyncToGenerator(function* () {
      request.model_name = (0, _sdkRtl.encodeParam)(request.model_name);
      request.view_name = (0, _sdkRtl.encodeParam)(request.view_name);
      return _this123.get("/derived_table/".concat(request.model_name, "/").concat(request.view_name, "/start"), {
        force_rebuild: request.force_rebuild,
        force_full_incremental: request.force_full_incremental,
        workspace: request.workspace,
        source: request.source
      }, null, options);
    })();
  }
  check_pdt_build(materialization_id, options) {
    var _this124 = this;
    return _asyncToGenerator(function* () {
      materialization_id = (0, _sdkRtl.encodeParam)(materialization_id);
      return _this124.get("/derived_table/".concat(materialization_id, "/status"), null, null, options);
    })();
  }
  stop_pdt_build(materialization_id, source, options) {
    var _this125 = this;
    return _asyncToGenerator(function* () {
      materialization_id = (0, _sdkRtl.encodeParam)(materialization_id);
      return _this125.get("/derived_table/".concat(materialization_id, "/stop"), {
        source
      }, null, options);
    })();
  }
  search_folders(request, options) {
    var _this126 = this;
    return _asyncToGenerator(function* () {
      return _this126.get('/folders/search', {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        name: request.name,
        id: request.id,
        parent_id: request.parent_id,
        creator_id: request.creator_id,
        filter_or: request.filter_or,
        is_shared_root: request.is_shared_root,
        is_users_root: request.is_users_root
      }, null, options);
    })();
  }
  folder(folder_id, fields, options) {
    var _this127 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this127.get("/folders/".concat(folder_id), {
        fields
      }, null, options);
    })();
  }
  update_folder(folder_id, body, options) {
    var _this128 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this128.patch("/folders/".concat(folder_id), null, body, options);
    })();
  }
  delete_folder(folder_id, options) {
    var _this129 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this129.delete("/folders/".concat(folder_id), null, null, options);
    })();
  }
  all_folders(fields, options) {
    var _this130 = this;
    return _asyncToGenerator(function* () {
      return _this130.get('/folders', {
        fields
      }, null, options);
    })();
  }
  create_folder(body, options) {
    var _this131 = this;
    return _asyncToGenerator(function* () {
      return _this131.post('/folders', null, body, options);
    })();
  }
  folder_children(request, options) {
    var _this132 = this;
    return _asyncToGenerator(function* () {
      request.folder_id = (0, _sdkRtl.encodeParam)(request.folder_id);
      return _this132.get("/folders/".concat(request.folder_id, "/children"), {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts
      }, null, options);
    })();
  }
  folder_children_search(request, options) {
    var _this133 = this;
    return _asyncToGenerator(function* () {
      request.folder_id = (0, _sdkRtl.encodeParam)(request.folder_id);
      return _this133.get("/folders/".concat(request.folder_id, "/children/search"), {
        fields: request.fields,
        sorts: request.sorts,
        name: request.name
      }, null, options);
    })();
  }
  folder_parent(folder_id, fields, options) {
    var _this134 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this134.get("/folders/".concat(folder_id, "/parent"), {
        fields
      }, null, options);
    })();
  }
  folder_ancestors(folder_id, fields, options) {
    var _this135 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this135.get("/folders/".concat(folder_id, "/ancestors"), {
        fields
      }, null, options);
    })();
  }
  folder_looks(folder_id, fields, options) {
    var _this136 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this136.get("/folders/".concat(folder_id, "/looks"), {
        fields
      }, null, options);
    })();
  }
  folder_dashboards(folder_id, fields, options) {
    var _this137 = this;
    return _asyncToGenerator(function* () {
      folder_id = (0, _sdkRtl.encodeParam)(folder_id);
      return _this137.get("/folders/".concat(folder_id, "/dashboards"), {
        fields
      }, null, options);
    })();
  }
  all_groups(request, options) {
    var _this138 = this;
    return _asyncToGenerator(function* () {
      return _this138.get('/groups', {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        ids: request.ids,
        content_metadata_id: request.content_metadata_id,
        can_add_to_content_metadata: request.can_add_to_content_metadata
      }, null, options);
    })();
  }
  create_group(body, fields, options) {
    var _this139 = this;
    return _asyncToGenerator(function* () {
      return _this139.post('/groups', {
        fields
      }, body, options);
    })();
  }
  search_groups(request, options) {
    var _this140 = this;
    return _asyncToGenerator(function* () {
      return _this140.get('/groups/search', {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        filter_or: request.filter_or,
        id: request.id,
        name: request.name,
        external_group_id: request.external_group_id,
        externally_managed: request.externally_managed,
        externally_orphaned: request.externally_orphaned
      }, null, options);
    })();
  }
  group(group_id, fields, options) {
    var _this141 = this;
    return _asyncToGenerator(function* () {
      return _this141.get("/groups/".concat(group_id), {
        fields
      }, null, options);
    })();
  }
  update_group(group_id, body, fields, options) {
    var _this142 = this;
    return _asyncToGenerator(function* () {
      return _this142.patch("/groups/".concat(group_id), {
        fields
      }, body, options);
    })();
  }
  delete_group(group_id, options) {
    var _this143 = this;
    return _asyncToGenerator(function* () {
      return _this143.delete("/groups/".concat(group_id), null, null, options);
    })();
  }
  all_group_groups(group_id, fields, options) {
    var _this144 = this;
    return _asyncToGenerator(function* () {
      return _this144.get("/groups/".concat(group_id, "/groups"), {
        fields
      }, null, options);
    })();
  }
  add_group_group(group_id, body, options) {
    var _this145 = this;
    return _asyncToGenerator(function* () {
      return _this145.post("/groups/".concat(group_id, "/groups"), null, body, options);
    })();
  }
  all_group_users(request, options) {
    var _this146 = this;
    return _asyncToGenerator(function* () {
      return _this146.get("/groups/".concat(request.group_id, "/users"), {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts
      }, null, options);
    })();
  }
  add_group_user(group_id, body, options) {
    var _this147 = this;
    return _asyncToGenerator(function* () {
      return _this147.post("/groups/".concat(group_id, "/users"), null, body, options);
    })();
  }
  delete_group_user(group_id, user_id, options) {
    var _this148 = this;
    return _asyncToGenerator(function* () {
      return _this148.delete("/groups/".concat(group_id, "/users/").concat(user_id), null, null, options);
    })();
  }
  delete_group_from_group(group_id, deleting_group_id, options) {
    var _this149 = this;
    return _asyncToGenerator(function* () {
      return _this149.delete("/groups/".concat(group_id, "/groups/").concat(deleting_group_id), null, null, options);
    })();
  }
  update_user_attribute_group_value(group_id, user_attribute_id, body, options) {
    var _this150 = this;
    return _asyncToGenerator(function* () {
      return _this150.patch("/groups/".concat(group_id, "/attribute_values/").concat(user_attribute_id), null, body, options);
    })();
  }
  delete_user_attribute_group_value(group_id, user_attribute_id, options) {
    var _this151 = this;
    return _asyncToGenerator(function* () {
      return _this151.delete("/groups/".concat(group_id, "/attribute_values/").concat(user_attribute_id), null, null, options);
    })();
  }
  all_homepages(fields, options) {
    var _this152 = this;
    return _asyncToGenerator(function* () {
      return _this152.get('/homepages', {
        fields
      }, null, options);
    })();
  }
  create_homepage(body, fields, options) {
    var _this153 = this;
    return _asyncToGenerator(function* () {
      return _this153.post('/homepages', {
        fields
      }, body, options);
    })();
  }
  search_homepages(request, options) {
    var _this154 = this;
    return _asyncToGenerator(function* () {
      return _this154.get('/homepages/search', {
        title: request.title,
        created_at: request.created_at,
        first_name: request.first_name,
        last_name: request.last_name,
        fields: request.fields,
        favorited: request.favorited,
        creator_id: request.creator_id,
        page: request.page,
        per_page: request.per_page,
        offset: request.offset,
        limit: request.limit,
        sorts: request.sorts,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  homepage(homepage_id, fields, options) {
    var _this155 = this;
    return _asyncToGenerator(function* () {
      return _this155.get("/homepages/".concat(homepage_id), {
        fields
      }, null, options);
    })();
  }
  update_homepage(homepage_id, body, fields, options) {
    var _this156 = this;
    return _asyncToGenerator(function* () {
      return _this156.patch("/homepages/".concat(homepage_id), {
        fields
      }, body, options);
    })();
  }
  delete_homepage(homepage_id, options) {
    var _this157 = this;
    return _asyncToGenerator(function* () {
      return _this157.delete("/homepages/".concat(homepage_id), null, null, options);
    })();
  }
  all_homepage_items(request, options) {
    var _this158 = this;
    return _asyncToGenerator(function* () {
      return _this158.get('/homepage_items', {
        fields: request.fields,
        sorts: request.sorts,
        homepage_section_id: request.homepage_section_id
      }, null, options);
    })();
  }
  create_homepage_item(body, fields, options) {
    var _this159 = this;
    return _asyncToGenerator(function* () {
      return _this159.post('/homepage_items', {
        fields
      }, body, options);
    })();
  }
  homepage_item(homepage_item_id, fields, options) {
    var _this160 = this;
    return _asyncToGenerator(function* () {
      return _this160.get("/homepage_items/".concat(homepage_item_id), {
        fields
      }, null, options);
    })();
  }
  update_homepage_item(homepage_item_id, body, fields, options) {
    var _this161 = this;
    return _asyncToGenerator(function* () {
      return _this161.patch("/homepage_items/".concat(homepage_item_id), {
        fields
      }, body, options);
    })();
  }
  delete_homepage_item(homepage_item_id, options) {
    var _this162 = this;
    return _asyncToGenerator(function* () {
      return _this162.delete("/homepage_items/".concat(homepage_item_id), null, null, options);
    })();
  }
  all_homepage_sections(request, options) {
    var _this163 = this;
    return _asyncToGenerator(function* () {
      return _this163.get('/homepage_sections', {
        fields: request.fields,
        sorts: request.sorts
      }, null, options);
    })();
  }
  create_homepage_section(body, fields, options) {
    var _this164 = this;
    return _asyncToGenerator(function* () {
      return _this164.post('/homepage_sections', {
        fields
      }, body, options);
    })();
  }
  homepage_section(homepage_section_id, fields, options) {
    var _this165 = this;
    return _asyncToGenerator(function* () {
      return _this165.get("/homepage_sections/".concat(homepage_section_id), {
        fields
      }, null, options);
    })();
  }
  update_homepage_section(homepage_section_id, body, fields, options) {
    var _this166 = this;
    return _asyncToGenerator(function* () {
      return _this166.patch("/homepage_sections/".concat(homepage_section_id), {
        fields
      }, body, options);
    })();
  }
  delete_homepage_section(homepage_section_id, options) {
    var _this167 = this;
    return _asyncToGenerator(function* () {
      return _this167.delete("/homepage_sections/".concat(homepage_section_id), null, null, options);
    })();
  }
  all_primary_homepage_sections(fields, options) {
    var _this168 = this;
    return _asyncToGenerator(function* () {
      return _this168.get('/primary_homepage_sections', {
        fields
      }, null, options);
    })();
  }
  all_integration_hubs(fields, options) {
    var _this169 = this;
    return _asyncToGenerator(function* () {
      return _this169.get('/integration_hubs', {
        fields
      }, null, options);
    })();
  }
  create_integration_hub(body, fields, options) {
    var _this170 = this;
    return _asyncToGenerator(function* () {
      return _this170.post('/integration_hubs', {
        fields
      }, body, options);
    })();
  }
  integration_hub(integration_hub_id, fields, options) {
    var _this171 = this;
    return _asyncToGenerator(function* () {
      return _this171.get("/integration_hubs/".concat(integration_hub_id), {
        fields
      }, null, options);
    })();
  }
  update_integration_hub(integration_hub_id, body, fields, options) {
    var _this172 = this;
    return _asyncToGenerator(function* () {
      return _this172.patch("/integration_hubs/".concat(integration_hub_id), {
        fields
      }, body, options);
    })();
  }
  delete_integration_hub(integration_hub_id, options) {
    var _this173 = this;
    return _asyncToGenerator(function* () {
      return _this173.delete("/integration_hubs/".concat(integration_hub_id), null, null, options);
    })();
  }
  accept_integration_hub_legal_agreement(integration_hub_id, options) {
    var _this174 = this;
    return _asyncToGenerator(function* () {
      return _this174.post("/integration_hubs/".concat(integration_hub_id, "/accept_legal_agreement"), null, null, options);
    })();
  }
  all_integrations(request, options) {
    var _this175 = this;
    return _asyncToGenerator(function* () {
      return _this175.get('/integrations', {
        fields: request.fields,
        integration_hub_id: request.integration_hub_id
      }, null, options);
    })();
  }
  integration(integration_id, fields, options) {
    var _this176 = this;
    return _asyncToGenerator(function* () {
      integration_id = (0, _sdkRtl.encodeParam)(integration_id);
      return _this176.get("/integrations/".concat(integration_id), {
        fields
      }, null, options);
    })();
  }
  update_integration(integration_id, body, fields, options) {
    var _this177 = this;
    return _asyncToGenerator(function* () {
      integration_id = (0, _sdkRtl.encodeParam)(integration_id);
      return _this177.patch("/integrations/".concat(integration_id), {
        fields
      }, body, options);
    })();
  }
  fetch_integration_form(integration_id, body, options) {
    var _this178 = this;
    return _asyncToGenerator(function* () {
      integration_id = (0, _sdkRtl.encodeParam)(integration_id);
      return _this178.post("/integrations/".concat(integration_id, "/form"), null, body, options);
    })();
  }
  test_integration(integration_id, options) {
    var _this179 = this;
    return _asyncToGenerator(function* () {
      integration_id = (0, _sdkRtl.encodeParam)(integration_id);
      return _this179.post("/integrations/".concat(integration_id, "/test"), null, null, options);
    })();
  }
  all_looks(fields, options) {
    var _this180 = this;
    return _asyncToGenerator(function* () {
      return _this180.get('/looks', {
        fields
      }, null, options);
    })();
  }
  create_look(body, fields, options) {
    var _this181 = this;
    return _asyncToGenerator(function* () {
      return _this181.post('/looks', {
        fields
      }, body, options);
    })();
  }
  search_looks(request, options) {
    var _this182 = this;
    return _asyncToGenerator(function* () {
      return _this182.get('/looks/search', {
        id: request.id,
        title: request.title,
        description: request.description,
        content_favorite_id: request.content_favorite_id,
        space_id: request.space_id,
        user_id: request.user_id,
        view_count: request.view_count,
        deleted: request.deleted,
        query_id: request.query_id,
        curate: request.curate,
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  look(look_id, fields, options) {
    var _this183 = this;
    return _asyncToGenerator(function* () {
      return _this183.get("/looks/".concat(look_id), {
        fields
      }, null, options);
    })();
  }
  update_look(look_id, body, fields, options) {
    var _this184 = this;
    return _asyncToGenerator(function* () {
      return _this184.patch("/looks/".concat(look_id), {
        fields
      }, body, options);
    })();
  }
  delete_look(look_id, options) {
    var _this185 = this;
    return _asyncToGenerator(function* () {
      return _this185.delete("/looks/".concat(look_id), null, null, options);
    })();
  }
  run_look(request, options) {
    var _this186 = this;
    return _asyncToGenerator(function* () {
      request.result_format = (0, _sdkRtl.encodeParam)(request.result_format);
      return _this186.get("/looks/".concat(request.look_id, "/run/").concat(request.result_format), {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs
      }, null, options);
    })();
  }
  all_lookml_models(fields, options) {
    var _this187 = this;
    return _asyncToGenerator(function* () {
      return _this187.get('/lookml_models', {
        fields
      }, null, options);
    })();
  }
  create_lookml_model(body, options) {
    var _this188 = this;
    return _asyncToGenerator(function* () {
      return _this188.post('/lookml_models', null, body, options);
    })();
  }
  lookml_model(lookml_model_name, fields, options) {
    var _this189 = this;
    return _asyncToGenerator(function* () {
      lookml_model_name = (0, _sdkRtl.encodeParam)(lookml_model_name);
      return _this189.get("/lookml_models/".concat(lookml_model_name), {
        fields
      }, null, options);
    })();
  }
  update_lookml_model(lookml_model_name, body, options) {
    var _this190 = this;
    return _asyncToGenerator(function* () {
      lookml_model_name = (0, _sdkRtl.encodeParam)(lookml_model_name);
      return _this190.patch("/lookml_models/".concat(lookml_model_name), null, body, options);
    })();
  }
  delete_lookml_model(lookml_model_name, options) {
    var _this191 = this;
    return _asyncToGenerator(function* () {
      lookml_model_name = (0, _sdkRtl.encodeParam)(lookml_model_name);
      return _this191.delete("/lookml_models/".concat(lookml_model_name), null, null, options);
    })();
  }
  lookml_model_explore(lookml_model_name, explore_name, fields, options) {
    var _this192 = this;
    return _asyncToGenerator(function* () {
      lookml_model_name = (0, _sdkRtl.encodeParam)(lookml_model_name);
      explore_name = (0, _sdkRtl.encodeParam)(explore_name);
      return _this192.get("/lookml_models/".concat(lookml_model_name, "/explores/").concat(explore_name), {
        fields
      }, null, options);
    })();
  }
  all_git_branches(project_id, options) {
    var _this193 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this193.get("/projects/".concat(project_id, "/git_branches"), null, null, options);
    })();
  }
  git_branch(project_id, options) {
    var _this194 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this194.get("/projects/".concat(project_id, "/git_branch"), null, null, options);
    })();
  }
  update_git_branch(project_id, body, options) {
    var _this195 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this195.put("/projects/".concat(project_id, "/git_branch"), null, body, options);
    })();
  }
  create_git_branch(project_id, body, options) {
    var _this196 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this196.post("/projects/".concat(project_id, "/git_branch"), null, body, options);
    })();
  }
  find_git_branch(project_id, branch_name, options) {
    var _this197 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      branch_name = (0, _sdkRtl.encodeParam)(branch_name);
      return _this197.get("/projects/".concat(project_id, "/git_branch/").concat(branch_name), null, null, options);
    })();
  }
  delete_git_branch(project_id, branch_name, options) {
    var _this198 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      branch_name = (0, _sdkRtl.encodeParam)(branch_name);
      return _this198.delete("/projects/".concat(project_id, "/git_branch/").concat(branch_name), null, null, options);
    })();
  }
  deploy_ref_to_production(request, options) {
    var _this199 = this;
    return _asyncToGenerator(function* () {
      request.project_id = (0, _sdkRtl.encodeParam)(request.project_id);
      return _this199.post("/projects/".concat(request.project_id, "/deploy_ref_to_production"), {
        branch: request.branch,
        ref: request.ref
      }, null, options);
    })();
  }
  deploy_to_production(project_id, options) {
    var _this200 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this200.post("/projects/".concat(project_id, "/deploy_to_production"), null, null, options);
    })();
  }
  reset_project_to_production(project_id, options) {
    var _this201 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this201.post("/projects/".concat(project_id, "/reset_to_production"), null, null, options);
    })();
  }
  reset_project_to_remote(project_id, options) {
    var _this202 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this202.post("/projects/".concat(project_id, "/reset_to_remote"), null, null, options);
    })();
  }
  all_projects(fields, options) {
    var _this203 = this;
    return _asyncToGenerator(function* () {
      return _this203.get('/projects', {
        fields
      }, null, options);
    })();
  }
  create_project(body, options) {
    var _this204 = this;
    return _asyncToGenerator(function* () {
      return _this204.post('/projects', null, body, options);
    })();
  }
  project(project_id, fields, options) {
    var _this205 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this205.get("/projects/".concat(project_id), {
        fields
      }, null, options);
    })();
  }
  update_project(project_id, body, fields, options) {
    var _this206 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this206.patch("/projects/".concat(project_id), {
        fields
      }, body, options);
    })();
  }
  manifest(project_id, options) {
    var _this207 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this207.get("/projects/".concat(project_id, "/manifest"), null, null, options);
    })();
  }
  git_deploy_key(project_id, options) {
    var _this208 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this208.get("/projects/".concat(project_id, "/git/deploy_key"), null, null, options);
    })();
  }
  create_git_deploy_key(project_id, options) {
    var _this209 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this209.post("/projects/".concat(project_id, "/git/deploy_key"), null, null, options);
    })();
  }
  project_validation_results(project_id, fields, options) {
    var _this210 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this210.get("/projects/".concat(project_id, "/validate"), {
        fields
      }, null, options);
    })();
  }
  validate_project(project_id, fields, options) {
    var _this211 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this211.post("/projects/".concat(project_id, "/validate"), {
        fields
      }, null, options);
    })();
  }
  project_workspace(project_id, fields, options) {
    var _this212 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this212.get("/projects/".concat(project_id, "/current_workspace"), {
        fields
      }, null, options);
    })();
  }
  all_project_files(project_id, fields, options) {
    var _this213 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this213.get("/projects/".concat(project_id, "/files"), {
        fields
      }, null, options);
    })();
  }
  project_file(project_id, file_id, fields, options) {
    var _this214 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this214.get("/projects/".concat(project_id, "/files/file"), {
        file_id,
        fields
      }, null, options);
    })();
  }
  all_git_connection_tests(project_id, remote_url, options) {
    var _this215 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this215.get("/projects/".concat(project_id, "/git_connection_tests"), {
        remote_url
      }, null, options);
    })();
  }
  run_git_connection_test(request, options) {
    var _this216 = this;
    return _asyncToGenerator(function* () {
      request.project_id = (0, _sdkRtl.encodeParam)(request.project_id);
      request.test_id = (0, _sdkRtl.encodeParam)(request.test_id);
      return _this216.get("/projects/".concat(request.project_id, "/git_connection_tests/").concat(request.test_id), {
        remote_url: request.remote_url,
        use_production: request.use_production
      }, null, options);
    })();
  }
  all_lookml_tests(project_id, file_id, options) {
    var _this217 = this;
    return _asyncToGenerator(function* () {
      project_id = (0, _sdkRtl.encodeParam)(project_id);
      return _this217.get("/projects/".concat(project_id, "/lookml_tests"), {
        file_id
      }, null, options);
    })();
  }
  run_lookml_test(request, options) {
    var _this218 = this;
    return _asyncToGenerator(function* () {
      request.project_id = (0, _sdkRtl.encodeParam)(request.project_id);
      return _this218.get("/projects/".concat(request.project_id, "/lookml_tests/run"), {
        file_id: request.file_id,
        test: request.test,
        model: request.model
      }, null, options);
    })();
  }
  tag_ref(request, options) {
    var _this219 = this;
    return _asyncToGenerator(function* () {
      request.project_id = (0, _sdkRtl.encodeParam)(request.project_id);
      return _this219.post("/projects/".concat(request.project_id, "/tag"), {
        commit_sha: request.commit_sha,
        tag_name: request.tag_name,
        tag_message: request.tag_message
      }, request.body, options);
    })();
  }
  update_repository_credential(root_project_id, credential_id, body, options) {
    var _this220 = this;
    return _asyncToGenerator(function* () {
      root_project_id = (0, _sdkRtl.encodeParam)(root_project_id);
      credential_id = (0, _sdkRtl.encodeParam)(credential_id);
      return _this220.put("/projects/".concat(root_project_id, "/credential/").concat(credential_id), null, body, options);
    })();
  }
  delete_repository_credential(root_project_id, credential_id, options) {
    var _this221 = this;
    return _asyncToGenerator(function* () {
      root_project_id = (0, _sdkRtl.encodeParam)(root_project_id);
      credential_id = (0, _sdkRtl.encodeParam)(credential_id);
      return _this221.delete("/projects/".concat(root_project_id, "/credential/").concat(credential_id), null, null, options);
    })();
  }
  get_all_repository_credentials(root_project_id, options) {
    var _this222 = this;
    return _asyncToGenerator(function* () {
      root_project_id = (0, _sdkRtl.encodeParam)(root_project_id);
      return _this222.get("/projects/".concat(root_project_id, "/credentials"), null, null, options);
    })();
  }
  create_query_task(request, options) {
    var _this223 = this;
    return _asyncToGenerator(function* () {
      return _this223.post('/query_tasks', {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs,
        image_width: request.image_width,
        image_height: request.image_height,
        fields: request.fields
      }, request.body, options);
    })();
  }
  query_task_multi_results(query_task_ids, options) {
    var _this224 = this;
    return _asyncToGenerator(function* () {
      return _this224.get('/query_tasks/multi_results', {
        query_task_ids
      }, null, options);
    })();
  }
  query_task(query_task_id, fields, options) {
    var _this225 = this;
    return _asyncToGenerator(function* () {
      query_task_id = (0, _sdkRtl.encodeParam)(query_task_id);
      return _this225.get("/query_tasks/".concat(query_task_id), {
        fields
      }, null, options);
    })();
  }
  query_task_results(query_task_id, options) {
    var _this226 = this;
    return _asyncToGenerator(function* () {
      query_task_id = (0, _sdkRtl.encodeParam)(query_task_id);
      return _this226.get("/query_tasks/".concat(query_task_id, "/results"), null, null, options);
    })();
  }
  query(query_id, fields, options) {
    var _this227 = this;
    return _asyncToGenerator(function* () {
      return _this227.get("/queries/".concat(query_id), {
        fields
      }, null, options);
    })();
  }
  query_for_slug(slug, fields, options) {
    var _this228 = this;
    return _asyncToGenerator(function* () {
      slug = (0, _sdkRtl.encodeParam)(slug);
      return _this228.get("/queries/slug/".concat(slug), {
        fields
      }, null, options);
    })();
  }
  create_query(body, fields, options) {
    var _this229 = this;
    return _asyncToGenerator(function* () {
      return _this229.post('/queries', {
        fields
      }, body, options);
    })();
  }
  run_query(request, options) {
    var _this230 = this;
    return _asyncToGenerator(function* () {
      request.result_format = (0, _sdkRtl.encodeParam)(request.result_format);
      return _this230.get("/queries/".concat(request.query_id, "/run/").concat(request.result_format), {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs
      }, null, options);
    })();
  }
  run_inline_query(request, options) {
    var _this231 = this;
    return _asyncToGenerator(function* () {
      request.result_format = (0, _sdkRtl.encodeParam)(request.result_format);
      return _this231.post("/queries/run/".concat(request.result_format), {
        limit: request.limit,
        apply_formatting: request.apply_formatting,
        apply_vis: request.apply_vis,
        cache: request.cache,
        image_width: request.image_width,
        image_height: request.image_height,
        generate_drill_links: request.generate_drill_links,
        force_production: request.force_production,
        cache_only: request.cache_only,
        path_prefix: request.path_prefix,
        rebuild_pdts: request.rebuild_pdts,
        server_table_calcs: request.server_table_calcs
      }, request.body, options);
    })();
  }
  run_url_encoded_query(model_name, view_name, result_format, options) {
    var _this232 = this;
    return _asyncToGenerator(function* () {
      model_name = (0, _sdkRtl.encodeParam)(model_name);
      view_name = (0, _sdkRtl.encodeParam)(view_name);
      result_format = (0, _sdkRtl.encodeParam)(result_format);
      return _this232.get("/queries/models/".concat(model_name, "/views/").concat(view_name, "/run/").concat(result_format), null, null, options);
    })();
  }
  merge_query(merge_query_id, fields, options) {
    var _this233 = this;
    return _asyncToGenerator(function* () {
      merge_query_id = (0, _sdkRtl.encodeParam)(merge_query_id);
      return _this233.get("/merge_queries/".concat(merge_query_id), {
        fields
      }, null, options);
    })();
  }
  create_merge_query(body, fields, options) {
    var _this234 = this;
    return _asyncToGenerator(function* () {
      return _this234.post('/merge_queries', {
        fields
      }, body, options);
    })();
  }
  all_running_queries(options) {
    var _this235 = this;
    return _asyncToGenerator(function* () {
      return _this235.get('/running_queries', null, null, options);
    })();
  }
  kill_query(query_task_id, options) {
    var _this236 = this;
    return _asyncToGenerator(function* () {
      query_task_id = (0, _sdkRtl.encodeParam)(query_task_id);
      return _this236.delete("/running_queries/".concat(query_task_id), null, null, options);
    })();
  }
  sql_query(slug, options) {
    var _this237 = this;
    return _asyncToGenerator(function* () {
      slug = (0, _sdkRtl.encodeParam)(slug);
      return _this237.get("/sql_queries/".concat(slug), null, null, options);
    })();
  }
  create_sql_query(body, options) {
    var _this238 = this;
    return _asyncToGenerator(function* () {
      return _this238.post('/sql_queries', null, body, options);
    })();
  }
  run_sql_query(slug, result_format, download, options) {
    var _this239 = this;
    return _asyncToGenerator(function* () {
      slug = (0, _sdkRtl.encodeParam)(slug);
      result_format = (0, _sdkRtl.encodeParam)(result_format);
      return _this239.post("/sql_queries/".concat(slug, "/run/").concat(result_format), {
        download
      }, null, options);
    })();
  }
  create_lookml_dashboard_render_task(request, options) {
    var _this240 = this;
    return _asyncToGenerator(function* () {
      request.dashboard_id = (0, _sdkRtl.encodeParam)(request.dashboard_id);
      request.result_format = (0, _sdkRtl.encodeParam)(request.result_format);
      return _this240.post("/render_tasks/lookml_dashboards/".concat(request.dashboard_id, "/").concat(request.result_format), {
        width: request.width,
        height: request.height,
        fields: request.fields,
        pdf_paper_size: request.pdf_paper_size,
        pdf_landscape: request.pdf_landscape
      }, request.body, options);
    })();
  }
  create_look_render_task(look_id, result_format, width, height, fields, options) {
    var _this241 = this;
    return _asyncToGenerator(function* () {
      result_format = (0, _sdkRtl.encodeParam)(result_format);
      return _this241.post("/render_tasks/looks/".concat(look_id, "/").concat(result_format), {
        width,
        height,
        fields
      }, null, options);
    })();
  }
  create_query_render_task(query_id, result_format, width, height, fields, options) {
    var _this242 = this;
    return _asyncToGenerator(function* () {
      result_format = (0, _sdkRtl.encodeParam)(result_format);
      return _this242.post("/render_tasks/queries/".concat(query_id, "/").concat(result_format), {
        width,
        height,
        fields
      }, null, options);
    })();
  }
  create_dashboard_render_task(request, options) {
    var _this243 = this;
    return _asyncToGenerator(function* () {
      request.result_format = (0, _sdkRtl.encodeParam)(request.result_format);
      return _this243.post("/render_tasks/dashboards/".concat(request.dashboard_id, "/").concat(request.result_format), {
        width: request.width,
        height: request.height,
        fields: request.fields,
        pdf_paper_size: request.pdf_paper_size,
        pdf_landscape: request.pdf_landscape
      }, request.body, options);
    })();
  }
  render_task(render_task_id, fields, options) {
    var _this244 = this;
    return _asyncToGenerator(function* () {
      render_task_id = (0, _sdkRtl.encodeParam)(render_task_id);
      return _this244.get("/render_tasks/".concat(render_task_id), {
        fields
      }, null, options);
    })();
  }
  render_task_results(render_task_id, options) {
    var _this245 = this;
    return _asyncToGenerator(function* () {
      render_task_id = (0, _sdkRtl.encodeParam)(render_task_id);
      return _this245.get("/render_tasks/".concat(render_task_id, "/results"), null, null, options);
    })();
  }
  search_model_sets(request, options) {
    var _this246 = this;
    return _asyncToGenerator(function* () {
      return _this246.get('/model_sets/search', {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        id: request.id,
        name: request.name,
        all_access: request.all_access,
        built_in: request.built_in,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  model_set(model_set_id, fields, options) {
    var _this247 = this;
    return _asyncToGenerator(function* () {
      return _this247.get("/model_sets/".concat(model_set_id), {
        fields
      }, null, options);
    })();
  }
  update_model_set(model_set_id, body, options) {
    var _this248 = this;
    return _asyncToGenerator(function* () {
      return _this248.patch("/model_sets/".concat(model_set_id), null, body, options);
    })();
  }
  delete_model_set(model_set_id, options) {
    var _this249 = this;
    return _asyncToGenerator(function* () {
      return _this249.delete("/model_sets/".concat(model_set_id), null, null, options);
    })();
  }
  all_model_sets(fields, options) {
    var _this250 = this;
    return _asyncToGenerator(function* () {
      return _this250.get('/model_sets', {
        fields
      }, null, options);
    })();
  }
  create_model_set(body, options) {
    var _this251 = this;
    return _asyncToGenerator(function* () {
      return _this251.post('/model_sets', null, body, options);
    })();
  }
  all_permissions(options) {
    var _this252 = this;
    return _asyncToGenerator(function* () {
      return _this252.get('/permissions', null, null, options);
    })();
  }
  search_permission_sets(request, options) {
    var _this253 = this;
    return _asyncToGenerator(function* () {
      return _this253.get('/permission_sets/search', {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        id: request.id,
        name: request.name,
        all_access: request.all_access,
        built_in: request.built_in,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  permission_set(permission_set_id, fields, options) {
    var _this254 = this;
    return _asyncToGenerator(function* () {
      return _this254.get("/permission_sets/".concat(permission_set_id), {
        fields
      }, null, options);
    })();
  }
  update_permission_set(permission_set_id, body, options) {
    var _this255 = this;
    return _asyncToGenerator(function* () {
      return _this255.patch("/permission_sets/".concat(permission_set_id), null, body, options);
    })();
  }
  delete_permission_set(permission_set_id, options) {
    var _this256 = this;
    return _asyncToGenerator(function* () {
      return _this256.delete("/permission_sets/".concat(permission_set_id), null, null, options);
    })();
  }
  all_permission_sets(fields, options) {
    var _this257 = this;
    return _asyncToGenerator(function* () {
      return _this257.get('/permission_sets', {
        fields
      }, null, options);
    })();
  }
  create_permission_set(body, options) {
    var _this258 = this;
    return _asyncToGenerator(function* () {
      return _this258.post('/permission_sets', null, body, options);
    })();
  }
  all_roles(request, options) {
    var _this259 = this;
    return _asyncToGenerator(function* () {
      return _this259.get('/roles', {
        fields: request.fields,
        ids: request.ids
      }, null, options);
    })();
  }
  create_role(body, options) {
    var _this260 = this;
    return _asyncToGenerator(function* () {
      return _this260.post('/roles', null, body, options);
    })();
  }
  search_roles(request, options) {
    var _this261 = this;
    return _asyncToGenerator(function* () {
      return _this261.get('/roles/search', {
        fields: request.fields,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        id: request.id,
        name: request.name,
        built_in: request.built_in,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  role(role_id, options) {
    var _this262 = this;
    return _asyncToGenerator(function* () {
      return _this262.get("/roles/".concat(role_id), null, null, options);
    })();
  }
  update_role(role_id, body, options) {
    var _this263 = this;
    return _asyncToGenerator(function* () {
      return _this263.patch("/roles/".concat(role_id), null, body, options);
    })();
  }
  delete_role(role_id, options) {
    var _this264 = this;
    return _asyncToGenerator(function* () {
      return _this264.delete("/roles/".concat(role_id), null, null, options);
    })();
  }
  role_groups(role_id, fields, options) {
    var _this265 = this;
    return _asyncToGenerator(function* () {
      return _this265.get("/roles/".concat(role_id, "/groups"), {
        fields
      }, null, options);
    })();
  }
  set_role_groups(role_id, body, options) {
    var _this266 = this;
    return _asyncToGenerator(function* () {
      return _this266.put("/roles/".concat(role_id, "/groups"), null, body, options);
    })();
  }
  role_users(request, options) {
    var _this267 = this;
    return _asyncToGenerator(function* () {
      return _this267.get("/roles/".concat(request.role_id, "/users"), {
        fields: request.fields,
        direct_association_only: request.direct_association_only
      }, null, options);
    })();
  }
  set_role_users(role_id, body, options) {
    var _this268 = this;
    return _asyncToGenerator(function* () {
      return _this268.put("/roles/".concat(role_id, "/users"), null, body, options);
    })();
  }
  scheduled_plans_for_space(space_id, fields, options) {
    var _this269 = this;
    return _asyncToGenerator(function* () {
      return _this269.get("/scheduled_plans/space/".concat(space_id), {
        fields
      }, null, options);
    })();
  }
  scheduled_plan(scheduled_plan_id, fields, options) {
    var _this270 = this;
    return _asyncToGenerator(function* () {
      return _this270.get("/scheduled_plans/".concat(scheduled_plan_id), {
        fields
      }, null, options);
    })();
  }
  update_scheduled_plan(scheduled_plan_id, body, options) {
    var _this271 = this;
    return _asyncToGenerator(function* () {
      return _this271.patch("/scheduled_plans/".concat(scheduled_plan_id), null, body, options);
    })();
  }
  delete_scheduled_plan(scheduled_plan_id, options) {
    var _this272 = this;
    return _asyncToGenerator(function* () {
      return _this272.delete("/scheduled_plans/".concat(scheduled_plan_id), null, null, options);
    })();
  }
  all_scheduled_plans(request, options) {
    var _this273 = this;
    return _asyncToGenerator(function* () {
      return _this273.get('/scheduled_plans', {
        user_id: request.user_id,
        fields: request.fields,
        all_users: request.all_users
      }, null, options);
    })();
  }
  create_scheduled_plan(body, options) {
    var _this274 = this;
    return _asyncToGenerator(function* () {
      return _this274.post('/scheduled_plans', null, body, options);
    })();
  }
  scheduled_plan_run_once(body, options) {
    var _this275 = this;
    return _asyncToGenerator(function* () {
      return _this275.post('/scheduled_plans/run_once', null, body, options);
    })();
  }
  scheduled_plans_for_look(request, options) {
    var _this276 = this;
    return _asyncToGenerator(function* () {
      return _this276.get("/scheduled_plans/look/".concat(request.look_id), {
        user_id: request.user_id,
        fields: request.fields,
        all_users: request.all_users
      }, null, options);
    })();
  }
  scheduled_plans_for_dashboard(request, options) {
    var _this277 = this;
    return _asyncToGenerator(function* () {
      return _this277.get("/scheduled_plans/dashboard/".concat(request.dashboard_id), {
        user_id: request.user_id,
        all_users: request.all_users,
        fields: request.fields
      }, null, options);
    })();
  }
  scheduled_plans_for_lookml_dashboard(request, options) {
    var _this278 = this;
    return _asyncToGenerator(function* () {
      request.lookml_dashboard_id = (0, _sdkRtl.encodeParam)(request.lookml_dashboard_id);
      return _this278.get("/scheduled_plans/lookml_dashboard/".concat(request.lookml_dashboard_id), {
        user_id: request.user_id,
        fields: request.fields,
        all_users: request.all_users
      }, null, options);
    })();
  }
  scheduled_plan_run_once_by_id(scheduled_plan_id, body, options) {
    var _this279 = this;
    return _asyncToGenerator(function* () {
      return _this279.post("/scheduled_plans/".concat(scheduled_plan_id, "/run_once"), null, body, options);
    })();
  }
  session(options) {
    var _this280 = this;
    return _asyncToGenerator(function* () {
      return _this280.get('/session', null, null, options);
    })();
  }
  update_session(body, options) {
    var _this281 = this;
    return _asyncToGenerator(function* () {
      return _this281.patch('/session', null, body, options);
    })();
  }
  search_spaces(request, options) {
    var _this282 = this;
    return _asyncToGenerator(function* () {
      return _this282.get('/spaces/search', {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        name: request.name,
        id: request.id,
        parent_id: request.parent_id,
        creator_id: request.creator_id,
        filter_or: request.filter_or,
        is_shared_root: request.is_shared_root,
        is_users_root: request.is_users_root
      }, null, options);
    })();
  }
  space(space_id, fields, options) {
    var _this283 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this283.get("/spaces/".concat(space_id), {
        fields
      }, null, options);
    })();
  }
  update_space(space_id, body, options) {
    var _this284 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this284.patch("/spaces/".concat(space_id), null, body, options);
    })();
  }
  delete_space(space_id, options) {
    var _this285 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this285.delete("/spaces/".concat(space_id), null, null, options);
    })();
  }
  all_spaces(fields, options) {
    var _this286 = this;
    return _asyncToGenerator(function* () {
      return _this286.get('/spaces', {
        fields
      }, null, options);
    })();
  }
  create_space(body, options) {
    var _this287 = this;
    return _asyncToGenerator(function* () {
      return _this287.post('/spaces', null, body, options);
    })();
  }
  space_children(request, options) {
    var _this288 = this;
    return _asyncToGenerator(function* () {
      request.space_id = (0, _sdkRtl.encodeParam)(request.space_id);
      return _this288.get("/spaces/".concat(request.space_id, "/children"), {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts
      }, null, options);
    })();
  }
  space_children_search(request, options) {
    var _this289 = this;
    return _asyncToGenerator(function* () {
      request.space_id = (0, _sdkRtl.encodeParam)(request.space_id);
      return _this289.get("/spaces/".concat(request.space_id, "/children/search"), {
        fields: request.fields,
        sorts: request.sorts,
        name: request.name
      }, null, options);
    })();
  }
  space_parent(space_id, fields, options) {
    var _this290 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this290.get("/spaces/".concat(space_id, "/parent"), {
        fields
      }, null, options);
    })();
  }
  space_ancestors(space_id, fields, options) {
    var _this291 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this291.get("/spaces/".concat(space_id, "/ancestors"), {
        fields
      }, null, options);
    })();
  }
  space_looks(space_id, fields, options) {
    var _this292 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this292.get("/spaces/".concat(space_id, "/looks"), {
        fields
      }, null, options);
    })();
  }
  space_dashboards(space_id, fields, options) {
    var _this293 = this;
    return _asyncToGenerator(function* () {
      space_id = (0, _sdkRtl.encodeParam)(space_id);
      return _this293.get("/spaces/".concat(space_id, "/dashboards"), {
        fields
      }, null, options);
    })();
  }
  all_themes(fields, options) {
    var _this294 = this;
    return _asyncToGenerator(function* () {
      return _this294.get('/themes', {
        fields
      }, null, options);
    })();
  }
  create_theme(body, options) {
    var _this295 = this;
    return _asyncToGenerator(function* () {
      return _this295.post('/themes', null, body, options);
    })();
  }
  search_themes(request, options) {
    var _this296 = this;
    return _asyncToGenerator(function* () {
      return _this296.get('/themes/search', {
        id: request.id,
        name: request.name,
        begin_at: request.begin_at,
        end_at: request.end_at,
        limit: request.limit,
        offset: request.offset,
        sorts: request.sorts,
        fields: request.fields,
        filter_or: request.filter_or
      }, null, options);
    })();
  }
  default_theme(ts, options) {
    var _this297 = this;
    return _asyncToGenerator(function* () {
      return _this297.get('/themes/default', {
        ts
      }, null, options);
    })();
  }
  set_default_theme(name, options) {
    var _this298 = this;
    return _asyncToGenerator(function* () {
      return _this298.put('/themes/default', {
        name
      }, null, options);
    })();
  }
  active_themes(request, options) {
    var _this299 = this;
    return _asyncToGenerator(function* () {
      return _this299.get('/themes/active', {
        name: request.name,
        ts: request.ts,
        fields: request.fields
      }, null, options);
    })();
  }
  theme_or_default(name, ts, options) {
    var _this300 = this;
    return _asyncToGenerator(function* () {
      return _this300.get('/themes/theme_or_default', {
        name,
        ts
      }, null, options);
    })();
  }
  validate_theme(body, options) {
    var _this301 = this;
    return _asyncToGenerator(function* () {
      return _this301.post('/themes/validate', null, body, options);
    })();
  }
  theme(theme_id, fields, options) {
    var _this302 = this;
    return _asyncToGenerator(function* () {
      theme_id = (0, _sdkRtl.encodeParam)(theme_id);
      return _this302.get("/themes/".concat(theme_id), {
        fields
      }, null, options);
    })();
  }
  update_theme(theme_id, body, options) {
    var _this303 = this;
    return _asyncToGenerator(function* () {
      theme_id = (0, _sdkRtl.encodeParam)(theme_id);
      return _this303.patch("/themes/".concat(theme_id), null, body, options);
    })();
  }
  delete_theme(theme_id, options) {
    var _this304 = this;
    return _asyncToGenerator(function* () {
      theme_id = (0, _sdkRtl.encodeParam)(theme_id);
      return _this304.delete("/themes/".concat(theme_id), null, null, options);
    })();
  }
  me(fields, options) {
    var _this305 = this;
    return _asyncToGenerator(function* () {
      return _this305.get('/user', {
        fields
      }, null, options);
    })();
  }
  all_users(request, options) {
    var _this306 = this;
    return _asyncToGenerator(function* () {
      return _this306.get('/users', {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        ids: request.ids
      }, null, options);
    })();
  }
  create_user(body, fields, options) {
    var _this307 = this;
    return _asyncToGenerator(function* () {
      return _this307.post('/users', {
        fields
      }, body, options);
    })();
  }
  search_users(request, options) {
    var _this308 = this;
    return _asyncToGenerator(function* () {
      return _this308.get('/users/search', {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        id: request.id,
        first_name: request.first_name,
        last_name: request.last_name,
        verified_looker_employee: request.verified_looker_employee,
        embed_user: request.embed_user,
        email: request.email,
        is_disabled: request.is_disabled,
        filter_or: request.filter_or,
        content_metadata_id: request.content_metadata_id,
        group_id: request.group_id
      }, null, options);
    })();
  }
  search_users_names(request, options) {
    var _this309 = this;
    return _asyncToGenerator(function* () {
      request.pattern = (0, _sdkRtl.encodeParam)(request.pattern);
      return _this309.get("/users/search/names/".concat(request.pattern), {
        fields: request.fields,
        page: request.page,
        per_page: request.per_page,
        sorts: request.sorts,
        id: request.id,
        first_name: request.first_name,
        last_name: request.last_name,
        verified_looker_employee: request.verified_looker_employee,
        email: request.email,
        is_disabled: request.is_disabled
      }, null, options);
    })();
  }
  user(user_id, fields, options) {
    var _this310 = this;
    return _asyncToGenerator(function* () {
      return _this310.get("/users/".concat(user_id), {
        fields
      }, null, options);
    })();
  }
  update_user(user_id, body, fields, options) {
    var _this311 = this;
    return _asyncToGenerator(function* () {
      return _this311.patch("/users/".concat(user_id), {
        fields
      }, body, options);
    })();
  }
  delete_user(user_id, options) {
    var _this312 = this;
    return _asyncToGenerator(function* () {
      return _this312.delete("/users/".concat(user_id), null, null, options);
    })();
  }
  user_for_credential(credential_type, credential_id, fields, options) {
    var _this313 = this;
    return _asyncToGenerator(function* () {
      credential_type = (0, _sdkRtl.encodeParam)(credential_type);
      credential_id = (0, _sdkRtl.encodeParam)(credential_id);
      return _this313.get("/users/credential/".concat(credential_type, "/").concat(credential_id), {
        fields
      }, null, options);
    })();
  }
  user_credentials_email(user_id, fields, options) {
    var _this314 = this;
    return _asyncToGenerator(function* () {
      return _this314.get("/users/".concat(user_id, "/credentials_email"), {
        fields
      }, null, options);
    })();
  }
  create_user_credentials_email(user_id, body, fields, options) {
    var _this315 = this;
    return _asyncToGenerator(function* () {
      return _this315.post("/users/".concat(user_id, "/credentials_email"), {
        fields
      }, body, options);
    })();
  }
  update_user_credentials_email(user_id, body, fields, options) {
    var _this316 = this;
    return _asyncToGenerator(function* () {
      return _this316.patch("/users/".concat(user_id, "/credentials_email"), {
        fields
      }, body, options);
    })();
  }
  delete_user_credentials_email(user_id, options) {
    var _this317 = this;
    return _asyncToGenerator(function* () {
      return _this317.delete("/users/".concat(user_id, "/credentials_email"), null, null, options);
    })();
  }
  user_credentials_totp(user_id, fields, options) {
    var _this318 = this;
    return _asyncToGenerator(function* () {
      return _this318.get("/users/".concat(user_id, "/credentials_totp"), {
        fields
      }, null, options);
    })();
  }
  create_user_credentials_totp(user_id, body, fields, options) {
    var _this319 = this;
    return _asyncToGenerator(function* () {
      return _this319.post("/users/".concat(user_id, "/credentials_totp"), {
        fields
      }, body, options);
    })();
  }
  delete_user_credentials_totp(user_id, options) {
    var _this320 = this;
    return _asyncToGenerator(function* () {
      return _this320.delete("/users/".concat(user_id, "/credentials_totp"), null, null, options);
    })();
  }
  user_credentials_ldap(user_id, fields, options) {
    var _this321 = this;
    return _asyncToGenerator(function* () {
      return _this321.get("/users/".concat(user_id, "/credentials_ldap"), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_ldap(user_id, options) {
    var _this322 = this;
    return _asyncToGenerator(function* () {
      return _this322.delete("/users/".concat(user_id, "/credentials_ldap"), null, null, options);
    })();
  }
  user_credentials_google(user_id, fields, options) {
    var _this323 = this;
    return _asyncToGenerator(function* () {
      return _this323.get("/users/".concat(user_id, "/credentials_google"), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_google(user_id, options) {
    var _this324 = this;
    return _asyncToGenerator(function* () {
      return _this324.delete("/users/".concat(user_id, "/credentials_google"), null, null, options);
    })();
  }
  user_credentials_saml(user_id, fields, options) {
    var _this325 = this;
    return _asyncToGenerator(function* () {
      return _this325.get("/users/".concat(user_id, "/credentials_saml"), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_saml(user_id, options) {
    var _this326 = this;
    return _asyncToGenerator(function* () {
      return _this326.delete("/users/".concat(user_id, "/credentials_saml"), null, null, options);
    })();
  }
  user_credentials_oidc(user_id, fields, options) {
    var _this327 = this;
    return _asyncToGenerator(function* () {
      return _this327.get("/users/".concat(user_id, "/credentials_oidc"), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_oidc(user_id, options) {
    var _this328 = this;
    return _asyncToGenerator(function* () {
      return _this328.delete("/users/".concat(user_id, "/credentials_oidc"), null, null, options);
    })();
  }
  user_credentials_api3(user_id, credentials_api3_id, fields, options) {
    var _this329 = this;
    return _asyncToGenerator(function* () {
      return _this329.get("/users/".concat(user_id, "/credentials_api3/").concat(credentials_api3_id), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_api3(user_id, credentials_api3_id, options) {
    var _this330 = this;
    return _asyncToGenerator(function* () {
      return _this330.delete("/users/".concat(user_id, "/credentials_api3/").concat(credentials_api3_id), null, null, options);
    })();
  }
  all_user_credentials_api3s(user_id, fields, options) {
    var _this331 = this;
    return _asyncToGenerator(function* () {
      return _this331.get("/users/".concat(user_id, "/credentials_api3"), {
        fields
      }, null, options);
    })();
  }
  create_user_credentials_api3(user_id, body, fields, options) {
    var _this332 = this;
    return _asyncToGenerator(function* () {
      return _this332.post("/users/".concat(user_id, "/credentials_api3"), {
        fields
      }, body, options);
    })();
  }
  user_credentials_embed(user_id, credentials_embed_id, fields, options) {
    var _this333 = this;
    return _asyncToGenerator(function* () {
      return _this333.get("/users/".concat(user_id, "/credentials_embed/").concat(credentials_embed_id), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_embed(user_id, credentials_embed_id, options) {
    var _this334 = this;
    return _asyncToGenerator(function* () {
      return _this334.delete("/users/".concat(user_id, "/credentials_embed/").concat(credentials_embed_id), null, null, options);
    })();
  }
  all_user_credentials_embeds(user_id, fields, options) {
    var _this335 = this;
    return _asyncToGenerator(function* () {
      return _this335.get("/users/".concat(user_id, "/credentials_embed"), {
        fields
      }, null, options);
    })();
  }
  user_credentials_looker_openid(user_id, fields, options) {
    var _this336 = this;
    return _asyncToGenerator(function* () {
      return _this336.get("/users/".concat(user_id, "/credentials_looker_openid"), {
        fields
      }, null, options);
    })();
  }
  delete_user_credentials_looker_openid(user_id, options) {
    var _this337 = this;
    return _asyncToGenerator(function* () {
      return _this337.delete("/users/".concat(user_id, "/credentials_looker_openid"), null, null, options);
    })();
  }
  user_session(user_id, session_id, fields, options) {
    var _this338 = this;
    return _asyncToGenerator(function* () {
      return _this338.get("/users/".concat(user_id, "/sessions/").concat(session_id), {
        fields
      }, null, options);
    })();
  }
  delete_user_session(user_id, session_id, options) {
    var _this339 = this;
    return _asyncToGenerator(function* () {
      return _this339.delete("/users/".concat(user_id, "/sessions/").concat(session_id), null, null, options);
    })();
  }
  all_user_sessions(user_id, fields, options) {
    var _this340 = this;
    return _asyncToGenerator(function* () {
      return _this340.get("/users/".concat(user_id, "/sessions"), {
        fields
      }, null, options);
    })();
  }
  create_user_credentials_email_password_reset(request, options) {
    var _this341 = this;
    return _asyncToGenerator(function* () {
      return _this341.post("/users/".concat(request.user_id, "/credentials_email/password_reset"), {
        expires: request.expires,
        fields: request.fields
      }, null, options);
    })();
  }
  user_roles(request, options) {
    var _this342 = this;
    return _asyncToGenerator(function* () {
      return _this342.get("/users/".concat(request.user_id, "/roles"), {
        fields: request.fields,
        direct_association_only: request.direct_association_only
      }, null, options);
    })();
  }
  set_user_roles(user_id, body, fields, options) {
    var _this343 = this;
    return _asyncToGenerator(function* () {
      return _this343.put("/users/".concat(user_id, "/roles"), {
        fields
      }, body, options);
    })();
  }
  user_attribute_user_values(request, options) {
    var _this344 = this;
    return _asyncToGenerator(function* () {
      return _this344.get("/users/".concat(request.user_id, "/attribute_values"), {
        fields: request.fields,
        user_attribute_ids: request.user_attribute_ids,
        all_values: request.all_values,
        include_unset: request.include_unset
      }, null, options);
    })();
  }
  set_user_attribute_user_value(user_id, user_attribute_id, body, options) {
    var _this345 = this;
    return _asyncToGenerator(function* () {
      return _this345.patch("/users/".concat(user_id, "/attribute_values/").concat(user_attribute_id), null, body, options);
    })();
  }
  delete_user_attribute_user_value(user_id, user_attribute_id, options) {
    var _this346 = this;
    return _asyncToGenerator(function* () {
      return _this346.delete("/users/".concat(user_id, "/attribute_values/").concat(user_attribute_id), null, null, options);
    })();
  }
  all_user_attributes(request, options) {
    var _this347 = this;
    return _asyncToGenerator(function* () {
      return _this347.get('/user_attributes', {
        fields: request.fields,
        sorts: request.sorts
      }, null, options);
    })();
  }
  create_user_attribute(body, fields, options) {
    var _this348 = this;
    return _asyncToGenerator(function* () {
      return _this348.post('/user_attributes', {
        fields
      }, body, options);
    })();
  }
  user_attribute(user_attribute_id, fields, options) {
    var _this349 = this;
    return _asyncToGenerator(function* () {
      return _this349.get("/user_attributes/".concat(user_attribute_id), {
        fields
      }, null, options);
    })();
  }
  update_user_attribute(user_attribute_id, body, fields, options) {
    var _this350 = this;
    return _asyncToGenerator(function* () {
      return _this350.patch("/user_attributes/".concat(user_attribute_id), {
        fields
      }, body, options);
    })();
  }
  delete_user_attribute(user_attribute_id, options) {
    var _this351 = this;
    return _asyncToGenerator(function* () {
      return _this351.delete("/user_attributes/".concat(user_attribute_id), null, null, options);
    })();
  }
  all_user_attribute_group_values(user_attribute_id, fields, options) {
    var _this352 = this;
    return _asyncToGenerator(function* () {
      return _this352.get("/user_attributes/".concat(user_attribute_id, "/group_values"), {
        fields
      }, null, options);
    })();
  }
  set_user_attribute_group_values(user_attribute_id, body, options) {
    var _this353 = this;
    return _asyncToGenerator(function* () {
      return _this353.post("/user_attributes/".concat(user_attribute_id, "/group_values"), null, body, options);
    })();
  }
  all_workspaces(options) {
    var _this354 = this;
    return _asyncToGenerator(function* () {
      return _this354.get('/workspaces', null, null, options);
    })();
  }
  workspace(workspace_id, options) {
    var _this355 = this;
    return _asyncToGenerator(function* () {
      workspace_id = (0, _sdkRtl.encodeParam)(workspace_id);
      return _this355.get("/workspaces/".concat(workspace_id), null, null, options);
    })();
  }
}
exports.Looker31SDK = Looker31SDK;
_defineProperty(Looker31SDK, "ApiVersion", '3.1');
//# sourceMappingURL=methods.js.map