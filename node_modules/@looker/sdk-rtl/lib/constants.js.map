{"version":3,"file":"constants.js","names":["matchCharset","exports","matchCharsetUtf8","concat","matchModeString","matchModeBinary","isTrue","value","test","isFalse","boolDefault","defaultBool","arguments","length","undefined","unquote","quote","substring","endsWith"],"sources":["../src/constants.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nexport const matchCharset = ';.*\bcharset\b='\n\n/**\n * Does this content type say it's utf-8?\n * @type {string} Regular expression for matching charset=utf-8 in Content-Type\n */\nexport const matchCharsetUtf8 = `${matchCharset}.*\\\\butf-8\\\\b`\n\n/**\n * Matching rules for string/text types. String matches must be checked *before* binary matches\n * @type {string} Regular expression for matching Content-Type headers\n */\nexport const matchModeString = `(^application\\\\/.*(\\\\bjson\\\\b|\\\\bxml\\\\b|\\\\bsql\\\\b|\\\\bgraphql\\\\b|\\\\bjavascript\\\\b|\\\\bx-www-form-urlencoded\\\\b)|^text\\\\/|.*\\\\+xml\\\\b|${matchCharset})`\n\n/**\n * Matching rules for all binary or unknown types. Binary matches must be checked *after* string matches\n * @type {string} Regular expression for matching Content-Type headers\n */\nexport const matchModeBinary =\n  '^image\\\\/|^audio\\\\/|^video\\\\/|^font\\\\/|^application\\\\/|^multipart\\\\/'\n\n/**\n * Does this string mean \"true\"\n * @param {string} value\n * @returns {boolean} true if matching a `true` value, false otherwise\n */\nexport const isTrue = (value: string) => /^(true|t|yes|y|1)$/i.test(value)\n\n/**\n * Does this string mean \"false\"\n * @param {string} value\n * @returns {boolean} true if matching a `false` value, false otherwise\n */\nexport const isFalse = (value: string) => /^(false|f|no|n|0)$/i.test(value)\n\n/**\n * Return true, false, or default boolean value for string representation of boolean\n * @param {string} value\n * @param {boolean} defaultBool is the value to return if the string doesn't match. defaults to false.\n * @returns {boolean} true or false\n */\nexport const boolDefault = (value: string, defaultBool = false) => {\n  if (isTrue(value)) return true\n  if (isFalse(value)) return false\n  return defaultBool\n}\n\n/**\n * strip surrounding quotes from a string if it is uniformly quoted\n * @param {string | null} value to unquote\n * @returns {string | null} unquoted string if it begins and ends with the same character out of `\\` \" '`\n */\nexport const unquote = (value: string | undefined | null): string => {\n  if (!value) return ''\n  if (/^['\"`]/.test(value)) {\n    const quote = value.substring(0, 1)\n    // Strip surrounding quotes?\n    if (value.endsWith(quote)) return value.substring(1, value.length - 1)\n  }\n  return value\n}\n\n/**\n * Documented type alias because URL assignment construction is not compatible with API parameters\n */\nexport type Url = string\n\n/** Documented type to clarify SDK hash types */\nexport interface IDictionary<T> {\n  [key: string]: T\n}\n\n/**\n * Documented type alias for password spec\n */\nexport type Password = string\n"],"mappings":";;;;;;AA0BO,IAAMA,YAAY,GAAG,eAAe;AAAAC,OAAA,CAAAD,YAAA,GAAAA,YAAA;AAMpC,IAAME,gBAAgB,MAAAC,MAAA,CAAMH,YAAY,kBAAe;AAAAC,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AAMvD,IAAME,eAAe,yIAAAD,MAAA,CAAyIH,YAAY,MAAG;AAAAC,OAAA,CAAAG,eAAA,GAAAA,eAAA;AAM7K,IAAMC,eAAe,GAC1B,sEAAsE;AAAAJ,OAAA,CAAAI,eAAA,GAAAA,eAAA;AAOjE,IAAMC,MAAM,GAAIC,KAAa,IAAK,qBAAqB,CAACC,IAAI,CAACD,KAAK,CAAC;AAAAN,OAAA,CAAAK,MAAA,GAAAA,MAAA;AAOnE,IAAMG,OAAO,GAAIF,KAAa,IAAK,qBAAqB,CAACC,IAAI,CAACD,KAAK,CAAC;AAAAN,OAAA,CAAAQ,OAAA,GAAAA,OAAA;AAQpE,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIH,KAAa,EAA0B;EAAA,IAAxBI,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC5D,IAAIN,MAAM,CAACC,KAAK,CAAC,EAAE,OAAO,IAAI;EAC9B,IAAIE,OAAO,CAACF,KAAK,CAAC,EAAE,OAAO,KAAK;EAChC,OAAOI,WAAW;AACpB,CAAC;AAAAV,OAAA,CAAAS,WAAA,GAAAA,WAAA;AAOM,IAAMK,OAAO,GAAIR,KAAgC,IAAa;EACnE,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EACrB,IAAI,QAAQ,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;IACxB,IAAMS,KAAK,GAAGT,KAAK,CAACU,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAEnC,IAAIV,KAAK,CAACW,QAAQ,CAACF,KAAK,CAAC,EAAE,OAAOT,KAAK,CAACU,SAAS,CAAC,CAAC,EAAEV,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC;EACxE;EACA,OAAON,KAAK;AACd,CAAC;AAAAN,OAAA,CAAAc,OAAA,GAAAA,OAAA"}